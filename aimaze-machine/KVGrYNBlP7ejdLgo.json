{
  "createdAt": "2025-04-19T15:21:20.845Z",
  "updatedAt": "2025-04-19T16:05:38.756Z",
  "id": "KVGrYNBlP7ejdLgo",
  "name": "Automaster-master-com-invervenção-v02",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $json.data[0].thread_id }}/runs/{{ $json.first_id }}/cancel",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "id": "6be8858a-fc5b-4527-962c-93a24ea193f3",
      "name": "Cancela a Run",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3960,
        1400
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e9f99497-32dd-448b-a4db-f8d1b19b0bc4",
              "leftValue": "={{ !!Object.keys($node[\"Baserow - Get User\"].data).length }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f6e2789e-0d65-4dfe-a84c-6820bb5c946a",
      "name": "Usuário Existe?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -4520,
        600
      ]
    },
    {
      "parameters": {
        "url": "https://evolution.pixeo.com.br/group/participants/pixeomkt",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "groupJid",
              "value": "120363329938537038@g.us"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "8dcb88713769e3f1e202283bf1bea161"
            }
          ]
        },
        "options": {}
      },
      "id": "d88c5a1f-1370-4ca8-8e3d-bf871f7f61cf",
      "name": "Busca participantes do grupo de teste",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4660,
        1620
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "1b3dcd1c-c24b-4df4-b9b8-6dfe4878d724",
      "name": "Loop Over Items2",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4440,
        1620
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8b1370e9-656d-4b67-b892-17eaab246e8e",
              "leftValue": "=",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1297f3f3-1f72-49c3-9bac-87c39ce578a7",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -4200,
        1640
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "databaseId": 168854,
        "tableId": 418625,
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3210935,
              "fieldValue": "={{ $('Webhook').item.json.body.data.key.remoteJid.split('@') [0]  }}"
            },
            {
              "fieldId": 3210936,
              "fieldValue": "={{ $('Webhook').item.json.body.data.pushName }}"
            }
          ]
        }
      },
      "id": "908a7a78-ba00-48cd-ae0c-a876e4be8557",
      "name": "Cria o usuário que nao foi encontrado no grupo",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -4240,
        760
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "content": "## Esse nó, confere se o usuário está em algum grupo\n\n**Esse nó faz a verificação se o usuário está cadastrado em\nalgum grupo e se ele estiver ele adiciona no banco de\ndados no Baserow**\n",
        "height": 540.5823932582209,
        "width": 1044.9827482398446
      },
      "id": "51ca9a4c-eb39-4824-8277-eeaa0a9bccf6",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4760,
        1360
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/threads",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "83202699-3ab1-488d-a02e-818a90666568",
      "name": "Cria a thread",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3720,
        840
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $('Possui Thread?').item.json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3210932,
              "fieldValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "id": "5b396df8-d9fa-436a-a1df-21b4970033b4",
      "name": "Adiciona Thread ao usuário",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -3720,
        1060
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "content": "## Verifica e Cria a Thread \nVerifica primeiro se o usuário possui Thread\nSe ele não tive thread é criado a thread\nDepois é atualizado no banco de dados",
        "height": 871.6710379321053,
        "width": 299.38680557696205
      },
      "id": "9305b031-94aa-4e31-947d-a0e5f74e332b",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4260,
        420
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5ae8cba9-3d8c-465b-b5b0-69493b7e4e91",
              "name": "=base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "66cdf375-aee3-46a4-95d7-a1e0dad631be",
      "name": "Audio Base",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3080,
        760
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "=base64",
        "options": {
          "fileName": "audio.mp3",
          "mimeType": "audio/mpeg"
        }
      },
      "id": "547b0ea0-b855-4bb3-b776-fb3e7eb01d6e",
      "name": "Convert to File6",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2900,
        760
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99667d07-ff62-4627-9136-64622c85c979",
              "name": "FinalTranscripition",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "aa157be3-d207-4f2d-bd9e-123bc0b4b541",
      "name": "Set Message from Audio3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2560,
        760
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5ae8cba9-3d8c-465b-b5b0-69493b7e4e91",
              "name": "=base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "96e04cf5-4c9c-483b-960f-97c647cfa02c",
      "name": "Image Base",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3060,
        1380
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "image.png",
          "mimeType": "image/png"
        }
      },
      "id": "e66c893d-8681-47cb-82c2-d66d878d22de",
      "name": "Convert to File7",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2920,
        1380
      ]
    },
    {
      "parameters": {
        "content": "## Identifica e transcreve as imagens",
        "height": 227.11653913117755,
        "width": 809.4697158869521
      },
      "id": "e3c14236-9e71-4e6d-be69-1236f7bd98c3",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        1320
      ]
    },
    {
      "parameters": {
        "content": "## Identifica e transcreve os áudios",
        "height": 255.41432385368404,
        "width": 729.2230537404986,
        "color": 4
      },
      "id": "8ccab8fe-97f5-470e-80c7-da4ad32faf94",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "6ddb5b65-3522-4a08-8a0e-2446f0d6c57d",
              "leftValue": "={{ $json.FinalTranscripition }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "4b625979-9b44-45d0-ad4c-8b27e526fb07",
      "name": "If4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -2140,
        1040
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99667d07-ff62-4627-9136-64622c85c979",
              "name": "FinalTranscripition",
              "value": "={{ $('Webhook').item.json.body.data.message.conversation }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f6045b94-d64a-4ca2-ac38-2e58175e8cb7",
      "name": "Set Message from image",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3100,
        480
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtendo o valor de 'content' do nó 'OpenAI7'\nconst content = $node[\"OpenAI8\"].json[\"content\"];\n\n// Obtendo o valor de 'caption' do nó 'Webhook4'\nconst caption = $node[\"Webhook\"].json[\"body\"][\"data\"][\"message\"][\"imageMessage\"][\"caption\"];\n\n// Concatenar os valores\nconst concatenatedText = content + \" \" + caption;\n\n// Retorna o texto concatenado\nreturn {\n  json: {\n    concatenatedText\n  }\n};"
      },
      "id": "47ae60e4-84ee-42d3-8c90-83603c6ce194",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2620,
        1380
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99667d07-ff62-4627-9136-64622c85c979",
              "name": "FinalTranscripition",
              "value": "={{ $json.concatenatedText }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f8966e44-1397-45bf-868c-55b43c59c5df",
      "name": "Set Message from image4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2460,
        1380
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "66f1b455-0f91-4380-acb3-3d3c515b3513",
              "name": "UrlEvo",
              "value": "={{ $('Webhook').item.json[\"body\"][\"server_url\"] }}",
              "type": "string"
            },
            {
              "id": "cd42d461-5c60-4023-8602-d545009b4d55",
              "name": "Estancia",
              "value": "={{ $('Webhook').item.json[\"body\"][\"instance\"] }}",
              "type": "string"
            },
            {
              "id": "1afba137-5b44-4ad9-9d90-364f7b5eba59",
              "name": "UrlFlowise",
              "value": "https://flowise.trecofantastico.com.br/api/v1/prediction/63f100eb-ca25-4cc7-b011-6d107dfef4f8",
              "type": "string"
            },
            {
              "id": "18339a2f-8a33-489e-9a78-2534d9d194fe",
              "name": "ApiKeyGroq",
              "value": "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",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "6b496e77-5071-4bfd-a487-26a66b217da0",
      "name": "Info Base1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3500,
        1080
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fb5f6e40-23b7-46ac-a01b-a538d68b01e7",
              "name": "base64",
              "value": "={{ $('Webhook').item.json[\"body\"][\"data\"][\"message\"][\"base64\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ef759059-1748-4121-a155-2fddd1deab57",
      "name": "Pega Base",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3360,
        1080
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/audio/transcriptions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=bearer {{ $('Info Base1').item.json[\"ApiKeyGroq\"] }}"
            },
            {
              "name": "Content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-large-v3"
            },
            {
              "name": "temperature",
              "value": "0.7"
            },
            {
              "name": "response_format",
              "value": "json"
            },
            {
              "name": "language",
              "value": "pt"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "mp4"
            }
          ]
        },
        "options": {}
      },
      "id": "dd5ad6f4-05cf-4cbe-910c-4e9cec943306",
      "name": "GroqTranscreve1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3060,
        1080
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "binaryPropertyName": "mp4",
        "options": {
          "fileName": "data.mp4"
        }
      },
      "id": "71244faf-5e47-4e30-9730-f24cdccb9ebb",
      "name": "Convert to File2",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3220,
        1080
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99667d07-ff62-4627-9136-64622c85c979",
              "name": "FinalTranscripition",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "063f8c33-c51e-4636-aa16-9c3883f7cced",
      "name": "Set Message from Audio1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2920,
        1080
      ]
    },
    {
      "parameters": {
        "amount": 1,
        "path": "8267182f-71f1-4df2-a31f-b2b40725fa7b"
      },
      "id": "561215a9-56d1-42ce-acce-9a7edb9762a0",
      "name": "Wait3",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -880,
        480
      ],
      "webhookId": "8267182f-71f1-4df2-a31f-b2b40725fa7b"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "5aa7e097-878c-43d0-8093-dac1ced274a5",
              "leftValue": "={{ $json.data[0].id }}",
              "rightValue": "={{ $('Cria a mensagem').item.json.id }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "536dac1e-56ef-4cc2-a7d8-bc3985203d74",
      "name": "Verifica se o usuário mandou mais mensagens1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -560,
        480
      ]
    },
    {
      "parameters": {},
      "id": "390bf473-bcd1-4111-afa0-fa5eefc4873d",
      "name": "Se for mandado o fluxo  é encerrado1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -380,
        660
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "eeeed6d6-6151-4bf4-a567-46bd5e2880c2",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        -2740,
        760
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "text": "=**Prompt para Descrição Detalhada da Estética Corporal com Base em Instruções de Imagem**\n\n**Instruções Iniciais:**\nAo descrever a imagem, foque exclusivamente na pessoa retratada, ignorando quaisquer elementos de fundo, roupas, ou outros objetos. Primeiramente, utilize qualquer texto fornecido no campo entre parentese {{ $('Webhook').item.json.body.data.message.imageMessage.caption }} para guiar sua descrição. Se o campo estiver vazio, baseie-se apenas nos detalhes visuais observados na imagem.\n\n**Detalhes a serem descritos:**\n\n1. **Pele:**\n   - **Textura:** Descreva se a pele parece suave, áspera, ou mostra irregularidades.\n   - **Cor:** Mencione se a cor da pele é uniforme ou se há presença de manchas, hiperpigmentação.\n   - **Características Notáveis:** Identifique qualquer presença de rugas, linhas de expressão, cicatrizes ou outras marcas notáveis.\n   - **Hidratação e Brilho:** Observe e relate sobre o brilho e a hidratação da pele.\n\n2. **Gordura Abdominal:**\n   - **Distribuição:** Comente sobre a distribuição da gordura na região abdominal, descrevendo se parece proeminente, volumosa ou definida.\n   - **Definição Muscular:** Mencione se há definição muscular visível ou se a mesma está coberta por gordura.\n   - **Retenção de Líquidos:** Relate qualquer sinal observável de retenção de líquidos ou inchaço.\n\n3. **Medidas Corporais:**\n   - **Proporções:** Fale sobre as proporções entre a cintura, quadris e pernas.\n   - **Contorno Corporal:** Descreva o contorno corporal, observando simetria e quaisquer desproporções notáveis.\n\n**Informação Adicional:**\n   - Sua descrição deve ser clara e focada somente na pessoa na imagem, providenciando detalhes visuais pertinentes sem inferir qualidades ou análises.\n\nso descreva a imagem nao retorne nada falando que é uma descrição faça o texto sem qualquer formatação",
        "inputType": "base64",
        "options": {}
      },
      "id": "be81c916-9534-4c1c-bfcd-7046aa9e9cf4",
      "name": "OpenAI8",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        -2760,
        1380
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "c6d3e783-2372-4b6b-8296-c8ffccacb8f2",
      "name": "listar mensagens2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -740,
        480
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "28f28c66-59a5-470b-8b30-a4bf47735d10",
              "leftValue": "={{ $json.thread_id }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d8089cb3-d87b-465a-80a9-6086ffbd6754",
      "name": "Possui Thread?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -3720,
        620
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Switch1').first().json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "role",
              "value": "user"
            },
            {
              "name": "content",
              "value": "=# informação do dia atual e os dias da semana.\n\nhoje: {{ $now.setZone('America/Sao_Paulo').toISO() }}: {{ $now.setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(1, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(1, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(2, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(2, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(3, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(3, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(4, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(4, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n\n------------\n#dados do usuário\nNome do usuário: {{ $('Switch1').item.json.user_name }}\nTelefone: {{ $('Switch1').item.json.user_id }}\nMensagem do usuário: {{ $('Merge5').item.json['FinalTranscripition'] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b6a9ed20-e5c8-4503-9903-4ae8b8a7f4fd",
      "name": "Cria a mensagem",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1440,
        500
      ],
      "alwaysOutputData": false,
      "credentials": {},
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "ae1dde05-1782-4dc0-a352-7dc74d098bce",
      "name": "listar mensagens3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1240,
        720
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3ad149bc-c41f-46bc-a641-5e96071244eb",
              "name": "base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "5f8d431c-7ef2-4d68-9122-09b1b0a0eaf8",
      "name": "Edit Fields2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3060,
        1680
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "={{ $('Webhook').item.json.body.data.message.documentWithCaptionMessage.message.documentMessage.caption }}",
          "mimeType": "application/pdf"
        }
      },
      "id": "a5ea2f78-f204-466b-a8d9-2a0fe5680f2f",
      "name": "Convert to File3",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2920,
        1680
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "c2178676-36e4-433c-9667-7f0cc18734c1",
      "name": "Extract from File2",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2760,
        1680
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3b76d240-b6ff-44bd-85f1-5be645a1c877",
              "name": "FinalTranscripition",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "7fb1fbb1-7bd3-422f-a0d9-e4daf7b76788",
      "name": "Edit Fields3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2600,
        1680
      ]
    },
    {
      "parameters": {
        "content": "## Recebe documentos em PDF",
        "height": 254.80860361992686,
        "width": 656.4771385462059,
        "color": 6
      },
      "id": "8c997b1c-5bae-4640-bfa1-f9e033ef41b4",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        1600
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs/{{ $json.first_id }}/cancel",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "id": "053ae0b9-1172-4de5-8d8b-878ae0c19671",
      "name": "cancel run1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1000,
        720
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "id": "6a42f4fe-f494-42ff-a2fd-5e30bf147e36",
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -3960,
        1540
      ]
    },
    {
      "parameters": {
        "content": "# Vision\n",
        "height": 1537.4290758294974,
        "width": 1017.0377812619341,
        "color": 5
      },
      "id": "b9acdabb-7ab5-4e5b-a4dd-bfb224ef7bab",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3640,
        380
      ]
    },
    {
      "parameters": {
        "content": "# TRANSCRIÇÃO DE AUDIO FEITA PELO GROQ",
        "height": 270.0604285360676,
        "width": 847.097310958336,
        "color": 3
      },
      "id": "ea76a10b-9c01-4bd7-84bd-e8a868383d4f",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        980
      ]
    },
    {
      "parameters": {
        "content": "# Buff Memory\n## *Essa seção entende mensagens mandadas separadamente*",
        "height": 554.7811528552347,
        "width": 1096.1823121305529,
        "color": 3
      },
      "id": "3debe254-a862-441a-9f5e-5eea73bcf586",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2180,
        360
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "c5102560-5eab-49c6-aae2-f35a14faa22d",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagem"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d7de1770-ed8b-4ad4-8eb2-269d2418b467",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "=conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7aced410-0f1a-46bd-8394-2c19f0edaece",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "documentWithCaptionMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            }
          ]
        },
        "options": {}
      },
      "id": "e189216c-afee-470d-923a-3841925c1b54",
      "name": "O que devo transcrever",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        -3960,
        1720
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "id": "d4e971c1-5308-40f0-8389-58b2a660c4e4",
      "name": "Merge - user",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -3940,
        620
      ]
    },
    {
      "parameters": {},
      "id": "1356f52f-54b1-420b-a1e3-fbbace8d517c",
      "name": "Merge5",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1960,
        500
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "/extendedTextMessage|conversation/",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "26e40a8a-8cc6-49af-9c5e-5ace09818a2a",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "/audioMessage/",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "4eeabdb7-9be5-406a-a1fc-89972bc0cf4a",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "/imageMessage/",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2445ba93-a8d9-4f95-82dc-e49e266f421a",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "/documentWithCaptionMessage/",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "pdf"
            }
          ]
        },
        "options": {}
      },
      "id": "9127c500-0071-49e7-8529-01aaab678afb",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        -3420,
        580
      ]
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Merge - user').item.json.thread_id }}/messages?order=desc",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "e8e03eb1-10d0-40f5-8013-7f78910f576e",
      "name": "Pega a ultima mensagem",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1400,
        1840
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "aabce377-b67b-4962-a634-587cac95841a",
      "name": "Extract from File3",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2600,
        1500
      ],
      "disabled": true
    },
    {
      "parameters": {
        "resource": "audio",
        "input": "={{ $json.data[0].content[0].text.value }}",
        "voice": "nova",
        "options": {}
      },
      "id": "a83929fb-356b-4013-8075-07d5245ce449",
      "name": "Envia resposta em Audio1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.5,
      "position": [
        2220,
        1500
      ],
      "credentials": {},
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Mensagem Final para o usuário\n### \n",
        "height": 1609,
        "width": 1767,
        "color": 4
      },
      "id": "74591dd2-7216-4633-95b7-bdf1419b2c0e",
      "name": "Sticky Note20",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        620,
        1460
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Você vai receber mensagens grandes do usuário. Seu trabalho é separá-las de acordo com o JSON Schema. Não invente ou altere a mensagem original de forma alguma. Cada chunk será enviado para o usuário, então tenha certeza de que não serão vários chunks, limite-se a 2 ou 3 frases por parágrafo. REGRAS: - Manter listas juntas, com seu respectivo título - Faça com que os parágrafos sejam longos o suficiente para não enviar várias mensagens para o usuário.\"\n    },\n    {\n      \"role\": \"user\"\n      \"content\": \"{{ $json.data[0].content[0].text.value }}\"\n    }\n  ],\n  \"response_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"name\": \"message_chunks\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"chunks\": {\n            \"type\": \"array\",\n            \"description\": \"An array of message chunks, where each chunk is a separate paragraph.\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"paragraph\": {\n                  \"type\": \"string\",\n                  \"description\": \"A coherent paragraph extracted from the large message.\"\n                },\n                \"sequence_number\": {\n                  \"type\": \"number\",\n                  \"description\": \"The order of this chunk in the original message.\"\n                }\n              },\n              \"required\": [\"paragraph\", \"sequence_number\"],\n              \"additionalProperties\": false\n            }\n          }\n        },\n        \"required\": [\"chunks\"],\n        \"additionalProperties\": false\n      }\n    }\n  }\n}",
        "options": {}
      },
      "id": "d3e83128-bf3a-4b08-bc20-d1301f79e30d",
      "name": "Chat Completion - Formatter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1000,
        2960
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d6e36e29-97f2-4375-9b90-a5e83d3e3225",
              "name": "messages",
              "value": "={{ $json.choices[0].message.content }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "b2df534e-8822-46a9-b838-74a3d7cddfda",
      "name": "Separa Chunks",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1160,
        2960
      ]
    },
    {
      "parameters": {
        "amount": 1,
        "path": "c3bbd346-eab9-40dd-9f68-1a95138b3780"
      },
      "id": "8204d3bd-4dd9-437e-8a66-6e1f3ace9a0a",
      "name": "Buffer",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2760,
        2920
      ],
      "webhookId": "c3bbd346-eab9-40dd-9f68-1a95138b3780"
    },
    {
      "parameters": {},
      "id": "e3fc1b9b-dbfd-4f7c-851f-75b711ac00e1",
      "name": "Fim",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2660,
        2620
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "messages.chunks",
        "options": {}
      },
      "id": "b4159e8a-5228-4657-a174-4e5b5c47addf",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1300,
        2960
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "38070a81-2744-4d51-a0c9-c52cb2671558",
      "name": "Loop Over Items5",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2200,
        2700
      ]
    },
    {
      "parameters": {
        "content": "## Envia Mensagem + Tratamento\nEnvia mensagens curtas e trata mensagens longas",
        "height": 388.7538544254027,
        "width": 1243.0339165003102,
        "color": 7
      },
      "id": "6ac91cd1-4c21-47b9-988f-e342610f52ef",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        940,
        2600
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "required_action.submit_tool_outputs.tool_calls",
        "options": {}
      },
      "id": "f905dc9a-87ee-40b5-82a2-93815b7865d6",
      "name": "Split Out2",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1160,
        -660
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": "={{ $('Loop Over Items3').context[\"done\"] }}"
        }
      },
      "id": "3cea24f2-a84d-47e1-b021-db95a8714e26",
      "name": "Loop Over Items3",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1380,
        -660
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6b39511f-c389-468a-916e-9d2d0a286f11",
              "name": "arguments",
              "value": "={{ $json.function.arguments }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "fad146df-6cfa-4e02-9d4c-80e561dd548b",
      "name": "separa argumentos1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1600,
        -520
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5e65cdf4-ec47-468a-8f7b-d1492d6ced4a",
                    "leftValue": "={{ $('Loop Over Items3').item.json.function.name }}",
                    "rightValue": "verifica_agendamentos",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "verifica_agendamentos"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "07d9a1c1-fa50-4a47-88ff-3b1e19472e66",
                    "leftValue": "={{ $('Loop Over Items3').item.json.function.name }}",
                    "rightValue": "agendar_reuniao",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "agendar_reunião"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2896c149-9318-4c42-afa1-4d469b05e0ff",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "reagendar_evento",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=reagendar_evento"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "69f49263-210b-4144-8b9d-873ca275fe5a",
                    "leftValue": "={{ $('Loop Over Items3').item.json.function.name }}",
                    "rightValue": "excluir_agendamento",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "excluir_agendamento"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f6992fb5-bfcd-47f1-9e0a-c73515258d1c",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "get_user_data",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get_user_data"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "enviar_notificacao_atendimento",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "07f5d75e-6c33-4003-83fd-d28e82d4464f"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "enviar_notificacao_atendimento"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "52ad1d15-9d3f-4f71-aa82-af532466af3a",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "save_user_data",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "save_user_data"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ab89c9e9-21b4-44be-9643-d6f39da85b08",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "verifica_agendamento_usuario",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "verifica_agendamento_usuario"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "93153aa5-efed-49c5-893c-f29b27779154",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "encerrar_conversa",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "encerrar_conversa"
            }
          ]
        },
        "options": {}
      },
      "id": "1e65d969-3f17-456c-b2c0-3c41ff586d2c",
      "name": "Escolhe Função1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1800,
        -520
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "155eb1f0-0ba5-4a9e-97ff-af2b0a8122e6",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "requires_action",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "requires_action"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "queued",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "queued"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f5e53bc7-5a5f-4255-a8a0-974bb330bd19",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "in_progress",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "in_progress"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d4c5de3b-7709-49cb-8690-2e11698dcc21",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "cancelling",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "cancelling"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "e14cf09b-fcd7-407d-98d6-cb0e7a42e1e7",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "cancelled",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "cancelled"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "9d6e149b-372d-406b-9084-efb2a8777d0f",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "failed",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "failed"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "25ea1e18-c8cb-4c5f-811f-a1e9c7155985",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "completed",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "completed"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "17b401d4-54f0-4686-8c75-1b3cb6db007d",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "incomplete",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "incomplete"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "a17c6659-6997-49da-bad2-7e0583251559",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "expired",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "expired"
            }
          ]
        },
        "options": {}
      },
      "id": "1b07f9f9-2f2a-448e-b465-b278f3db9a49",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        160,
        400
      ]
    },
    {
      "parameters": {
        "amount": 3,
        "path": "a23deb7a-ead3-4c00-9a10-da029356cbf6"
      },
      "id": "52bd14b8-16dd-4213-910a-2a762a7c07b5",
      "name": "Wait2",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        480,
        520
      ],
      "webhookId": "a23deb7a-ead3-4c00-9a10-da029356cbf6"
    },
    {
      "parameters": {
        "content": "## Parte que conversa com a inteligencia artificial ",
        "height": 585,
        "width": 883
      },
      "id": "8a064f1e-98a7-438c-b504-7ac5076b4f9a",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -880,
        320
      ]
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Merge - user').first().json.thread_id }}/runs/{{ $('Switch').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "id": "48e18f42-1557-4a1d-88b6-ee8ed305c1a1",
      "name": "Get Run Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        680
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Merge - user').first().json.thread_id }}/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "assistant_id",
              "value": "asst_DSNuWrewEP9RPrXcAWQCvnBR"
            }
          ]
        },
        "options": {}
      },
      "id": "25491f20-2a94-4812-95ee-549e0e3d745a",
      "name": "Executa uma Run - Aqui está o assistant",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -160,
        460
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418669,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3211226,
                "operator": "contains",
                "value": "={{ $json.arguments.category }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3720,
        -100
      ],
      "id": "be061018-20d2-4b38-8eec-58e6f0e93b26",
      "name": "Baserow1",
      "credentials": {}
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": \"name: {{ $json.Name }}, category: {{ $json.Category.value }}, author: {{ $json.author }}, price: {{ $json.price }}, media_url: {{ $json.URL }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3940,
        -100
      ],
      "id": "8e55324f-4a24-410e-9c85-77fead28a0eb",
      "name": "Prepara outpoot"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "output"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        6020,
        -320
      ],
      "id": "e1263d0d-ac35-48c8-ade3-7a35c138f14b",
      "name": "Summarize"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"tool_call_id\": \"{{ $('Split Out2').item.json.id }}\",\n  \"output\": \"{{ $json.concatenated_output }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6200,
        660
      ],
      "id": "e0f1bb9d-3732-45cd-8837-e793f5df4c80",
      "name": "Set tool call id"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1600,
        -760
      ],
      "id": "16b6309b-cf9c-4527-9e22-3622a4bc17a4",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Get Run Status').item.json.thread_id }}/runs/{{ $('Get Run Status').item.json.id }}/submit_tool_outputs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"tool_outputs\": {{ $json.output }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1940,
        -1040
      ],
      "id": "84fa5095-5aa2-4b9d-bdac-af4987025e5f",
      "name": "HTTP Request",
      "credentials": {}
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1e729de8-85e8-48ed-a102-dff33c603ee8",
              "name": "output",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1760,
        -1040
      ],
      "id": "1ea7cd3a-bf07-4803-91f3-f77603a9ae13",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $('Baserow - Get User').first().json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3214404,
              "fieldValue": "={{ $json.arguments.address }}"
            },
            {
              "fieldId": 3884594,
              "fieldValue": "={{ $json.arguments.email }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        4380,
        500
      ],
      "id": "83cbe4fa-4853-4af1-8459-d104e8ecc174",
      "name": "Baserow3",
      "credentials": {}
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": \"name: {{ $json.user_name }}, whatsapp: {{ $json.user_id }}, address:{{ $json.address }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4600,
        500
      ],
      "id": "b051e8ee-e4e3-4b62-bd7d-a0b2cfd37562",
      "name": "Prepara outpoot1"
    },
    {
      "parameters": {
        "operation": "get",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $('Baserow - Get User').first().json.id }}"
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        4380,
        300
      ],
      "id": "cd59c219-f432-4747-843c-df154a9b9992",
      "name": "Baserow4",
      "credentials": {}
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": \"name: {{ $json.user_name }}, whatsapp: {{ $json.user_id }}, address:{{ $json.address }}, id:{{ $json.id }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4600,
        300
      ],
      "id": "fd285881-b5cb-4742-9147-1dabe6edfefa",
      "name": "Prepara outpoot2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c04ec9b2-70be-4603-9d45-c62c69f32d24",
                    "leftValue": "={{ $json.data[0].content[0].text.value.extractUrl() }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Product"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2cbe22b8-2506-4a9a-9194-c0c5657b9590",
                    "leftValue": "={{ $json.data[0].content[0].text.value.extractUrl() }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1840,
        1840
      ],
      "id": "ee88e29e-4563-4a7f-869d-e79c113f3d0f",
      "name": "Switch3",
      "disabled": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "itens",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2560,
        1900
      ],
      "id": "0d4deb62-139f-4359-85d1-c8f5b2bad032",
      "name": "Split Out3"
    },
    {
      "parameters": {
        "amount": 1,
        "path": "d323693a-9a56-43b3-9585-2af44bfbbffc"
      },
      "id": "646e3e77-5772-4f58-ba3e-a6ae78b03531",
      "name": "Buffer1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3300,
        2000
      ],
      "webhookId": "d323693a-9a56-43b3-9585-2af44bfbbffc"
    },
    {
      "parameters": {},
      "id": "8f5e3a09-52c8-4403-b6d4-342bcc58a027",
      "name": "Fim1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3120,
        1820
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "afe5083f-317a-44fc-b76f-1755b880bc45",
      "name": "Loop Over Items6",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2800,
        1900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Captura o texto bruto da última mensagem\nconst rawData = $('Pega a ultima mensagem').first().json?.data?.[0]?.content?.[0]?.text?.value || \"\";\n\n// Regex para capturar os itens e rodapé\nconst itemRegex = /(\\*\\*(.*?)\\*\\*)[\\s\\S]*?Autor: (.*?)\\n.*?Preço: R\\$(.*?)\\n.*?\\!\\[.*?\\]\\((.*?)\\)/g;\nconst footerRegex = /\\n\\n(Se você se interessar.*?)$/; // Captura mensagem final\nconst headerRegex = /^(.*?):\\n\\n/; // Captura mensagem inicial\n\n// Inicializar variáveis\nconst mensagemInicial = rawData.match(headerRegex)?.[1]?.trim() || \"\";\nconst mensagemFinal = rawData.match(footerRegex)?.[1]?.trim() || \"\";\nconst itens = [];\nlet match;\n\n// Loop pelos itens encontrados\nwhile ((match = itemRegex.exec(rawData)) !== null) {\n  itens.push({\n    produto: `**${match[2]}**\\nAutor: ${match[3]}\\nPreço: R${match[4]}`,\n    url: match[5]\n  });\n}\n\n// Concatena mensagem inicial e final no primeiro produto\nif (itens.length > 0) {\n  itens[0].produto = `${mensagemInicial}\\n\\n${mensagemFinal}\\n\\n${itens[0].produto}`;\n}\n\n// Resultado final\nconst resultado = {\n  itens\n};\n\n// Retornar o resultado\nreturn resultado;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2180,
        1900
      ],
      "id": "bed8c081-ed83-492c-bae1-b1c4edf2b11f",
      "name": "Code"
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418625,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3210935,
                "value": "={{ $json.body.data.key.remoteJid.split('@') [0]  }}"
              }
            ]
          },
          "filterType": "OR"
        }
      },
      "id": "92cf73be-1c0f-4e94-9c8f-e672addf1ccd",
      "name": "Baserow - Get User",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -5020,
        620
      ],
      "alwaysOutputData": true,
      "credentials": {}
    },
    {
      "parameters": {
        "instanceName": "pixeomkt",
        "options_Create_instance": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        3080,
        2000
      ],
      "id": "12bfe4a6-2b6d-4314-972f-e0abe6e2c4d1",
      "name": "Evolution API1",
      "credentials": {}
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "aimaze",
        "remoteJid": "=553899225622",
        "messageText": "={{ $json.chunks }}",
        "options_message": {
          "delay": "={{ $json.delay }}"
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2460,
        2760
      ],
      "id": "0af73b53-3d50-4a50-8bb9-250af64ac391",
      "name": "Evolution API",
      "credentials": {}
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": \"name: {{ $json.user_name }}, whatsapp: {{ $json.user_id }}, address:{{ $json.address }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2340,
        2360
      ],
      "id": "bdd12564-4e76-4a00-99d7-910022bd6547",
      "name": "Prepara outpoot3"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "start": "={{ $('Escolhe Função1').item.json.arguments.data_inicio }}",
        "end": "={{ $('Escolhe Função1').item.json.arguments.data_fim }}",
        "additionalFields": {
          "description": "={{ $('separa argumentos1').item.json.arguments.descricao }}",
          "summary": "={{ $('separa argumentos1').item.json.arguments.assunto }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3340,
        -1140
      ],
      "id": "232b36cf-7393-482a-ae1f-13a01f7deac4",
      "name": "Google Calendar3",
      "credentials": {}
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3600,
        -1140
      ],
      "id": "66ff9c2e-8945-4c43-b6de-d4ad18c700fe",
      "name": "Separa dados calendar"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3820,
        -1140
      ],
      "id": "ee975cd2-ff78-4b55-9966-9fcee8d52026",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"agendado: {{ $json.evento }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4280,
        -1140
      ],
      "id": "56627322-3931-46ba-aba6-947a99fdcd61",
      "name": "output"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "returnAll": true,
        "timeMin": "={{ $json.arguments.inicio }}",
        "timeMax": "={{ $json.arguments.fim }}",
        "options": {
          "timeZone": {
            "__rl": true,
            "value": "America/Sao_Paulo",
            "mode": "list",
            "cachedResultName": "America/Sao_Paulo"
          }
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3260,
        -1540
      ],
      "id": "15bf0862-69d1-4ad8-b923-518fdd56281c",
      "name": "Google Calendar4",
      "alwaysOutputData": true,
      "credentials": {},
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "evento"
            }
          ]
        },
        "options": {
          "outputFormat": "singleItem"
        }
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        3920,
        -1540
      ],
      "id": "d1f682d1-5e09-476c-a8cb-74d0fff3f0a5",
      "name": "Summarize1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"horarios_disponiveis_no_dia: {{ $json.horarios_disponiveis }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4580,
        -1540
      ],
      "id": "7fb8f688-1655-42e9-9d5a-a14b85df282b",
      "name": "output1"
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "eventId": "={{ $json.arguments.event_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        4380,
        100
      ],
      "id": "896d68ce-f6fb-4d68-8755-1fc8e9580528",
      "name": "Google Calendar5",
      "credentials": {}
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"excluir_agendamento:{{ $json.success }}, o agendamento foi excluido com sucesso.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4600,
        100
      ],
      "id": "0e4d7e0b-6508-4093-9131-b25ddafdb0e2",
      "name": "output2"
    },
    {
      "parameters": {
        "content": "# Agendar reunião\n{\n  \"name\": \"agendar_reuniao\",\n  \"description\": \"Agenda uma reunião definindo data de início, data de fim (uma hora depois da data de início), assunto e descrição\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"data_inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data de início da reunião no formato ISO 8601, por exemplo, 2025-09-19T00:00:00\"\n      },\n      \"data_fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data de fim da reunião no mesmo formato, que deve ser uma hora após a data de início\"\n      },\n      \"assunto\": {\n        \"type\": \"string\",\n        \"description\": \"Assunto da reunião\"\n      },\n      \"descricao\": {\n        \"type\": \"string\",\n        \"description\": \"Descrição da reunião\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"data_inicio\",\n      \"data_fim\",\n      \"assunto\",\n      \"descricao\"\n    ]\n  }\n}",
        "height": 240,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5460,
        1640
      ],
      "id": "13fabbf8-d44a-4a7a-9a84-6080c2e09a4c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# verifica horários\n{\n  \"name\": \"verifica_agendamentos\",\n  \"description\": \"Verifica os agendamentos existentes no intervalo diário (00:00 às 23:59) e filtra somente os que ocorrem dentro do horário comercial (07:00 às 19:00, com o último horário de marcação às 18:00), retornando os horários livres em blocos de 1h.\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de início do intervalo para verificação, no formato ISO 8601 (ex: 2025-09-19T00:00:00)\"\n      },\n      \"fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de fim do intervalo para verificação, no mesmo formato (ex: 2025-09-19T23:59:00)\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"inicio\",\n      \"fim\"\n    ]\n  }\n}\n\n\n## versão final\n\n{\n  \"name\": \"verifica_agendamentos\",\n  \"description\": \"Verifica os agendamentos existentes no intervalo diário (00:00 às 23:59) e filtra somente os que ocorrem dentro do horário comercial (07:00 às 19:00, com o último horário de marcação às 18:00), retornando os horários livres em blocos de 1h.\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de início do intervalo para verificação, no formato ISO 8601 (ex: 2025-09-19T00:00:00)\"\n      },\n      \"fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de fim do intervalo para verificação, no mesmo formato (ex: 2025-09-19T23:59:00)\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"inicio\",\n      \"fim\"\n    ]\n  }\n}",
        "height": 740,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -6020,
        560
      ],
      "id": "68aad778-e38d-4e2b-9da7-293b7cd10fa1",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# delete\n{\n  \"name\": \"excluir_agendamet\",\n  \"description\": \"Exclui um agendamento com base no Event ID fornecido\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"event_id\": {\n        \"type\": \"string\",\n        \"description\": \"Identificador do evento a ser excluído\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"event_id\"\n    ]\n  }\n}",
        "height": 240,
        "width": 280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5760,
        1380
      ],
      "id": "e25eeec2-4a90-4313-9633-ff73d581aa9d",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsCode": "// ============ parâmetros “fáceis de mexer” =============\nconst inicioExpediente = 8;   // 08:00\nconst fimExpediente    = 19;  // 19:00  (o último slot será 18:30‑19:00)\nconst passoMinutos     = 30;  // tamanho do slot\n// =======================================================\n\n// 1. Entrada -------------------------------------------------------------\nconst entrada = $json.concatenated_evento ?? '';\n\n/* Entrada esperada (exemplo):\n   data_comeco: 2025-04-17T15:00:00-03:00, data_fim: 2025-04-17T16:00:00-03:00.,\n   data_comeco: 2025-04-17T17:00:00-03:00, data_fim: 2025-04-17T17:30:00-03:00.\n*/\n\n// 2. Extrai períodos ocupados -------------------------------------------\nconst busyRegex = /data_comeco:\\s*([\\d\\-T:+]+),\\s*data_fim:\\s*([\\d\\-T:+]+)\\.?/g;\nconst ocupados = []; // {iniMin, fimMin}\nlet m;\nwhile ((m = busyRegex.exec(entrada)) !== null) {\n  ocupados.push({\n    iniMin: isoToMinutes(m[1]),\n    fimMin: isoToMinutes(m[2]),\n  });\n}\n\n// 3. Gera slots disponíveis ---------------------------------------------\nconst disponiveis = [];\nfor (let iniMin = inicioExpediente * 60;\n     iniMin < fimExpediente * 60;\n     iniMin += passoMinutos) {\n\n  const fimMin = iniMin + passoMinutos;\n\n  // colisão?  (slotStart < busyEnd) && (slotEnd > busyStart)\n  const colide = ocupados.some(({iniMin: bIni, fimMin: bFim}) =>\n                                iniMin < bFim && fimMin > bIni);\n  if (colide) continue;\n\n  disponiveis.push(`${formatHHMM(iniMin)}-${formatHHMM(fimMin)}`);\n}\n\n// 4. Retorno -------------------------------------------------------------\nreturn [\n  {\n    json: {\n      horarios_disponiveis: disponiveis.join(', ')\n    }\n  }\n];\n\n// ============ utilitários ==============================================\nfunction isoToMinutes(iso) {\n  // “2025‑04‑17T15:00:00‑03:00” → 15*60 + 0\n  const timePart = iso.split('T')[1];      // 15:00:00‑03:00\n  const [hh, mm] = timePart.split(':');\n  return Number(hh) * 60 + Number(mm);\n}\n\nfunction formatHHMM(minutos) {\n  const hh = String(Math.floor(minutos / 60)).padStart(2, '0');\n  const mm = String(minutos % 60).padStart(2, '0');\n  return `${hh}:${mm}`;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4360,
        -1540
      ],
      "id": "44540e83-b7e7-49ab-acd1-25c877ed232e",
      "name": "Code2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3480,
        -1540
      ],
      "id": "a60bba2a-385c-4d27-ad32-56482323d427",
      "name": "Separa dados calendar2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3700,
        -1540
      ],
      "id": "3db2d17f-075c-4fb5-9b55-f2fe450abf02",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "content": "## Node-code separa horários disponíveis do calendário bloco de uma hora\n\n// Obtém a string dos eventos concatenados do input\nconst inputData = $json.concatenated_evento;\n\n// A data desejada pode vir do input ou assumir um padrão (ex.: \"2025-04-04\")\nconst diaDesejado = $json.date || \"2025-04-04\";\n\n// Regex para extrair os dados de cada agendamento\nconst regex = /id:\\s*([^,]+),\\s*data_comeco:\\s*([^,]+),\\s*data_fim:\\s*([^.]+)\\.\\s*Titulo:\\s*([^.,]+)/g;\n\n// Conjunto para armazenar os horários ocupados\nconst horariosOcupados = new Set();\nlet match;\n\nwhile ((match = regex.exec(inputData)) !== null) {\n  const dataComeco = match[2].trim();\n  // Considera somente os agendamentos que iniciam na data desejada\n  if (dataComeco.startsWith(diaDesejado)) {\n    // Extrai a parte do horário de início\n    const timePartInicio = dataComeco.split(\"T\")[1];\n    const horaInicio = parseInt(timePartInicio.substring(0, 2));    \n    const minutosInicio = parseInt(timePartInicio.substring(3, 5));   \n    // Se os minutos forem >= 30, bloqueia o próximo horário; senão, bloqueia o horário atual\n    const slotInicio = minutosInicio >= 30 ? horaInicio + 1 : horaInicio;\n    \n    // Extrai a parte do horário de término\n    const dataFim = match[3].trim();\n    const timePartFim = dataFim.split(\"T\")[1];\n    const horaFim = parseInt(timePartFim.substring(0, 2));    \n    const minutosFim = parseInt(timePartFim.substring(3, 5));   \n    const slotFim = minutosFim >= 30 ? horaFim + 1 : horaFim;\n    \n    // Bloqueia todos os horários entre o início e o término (não incluindo o horário de término)\n    for (let hora = slotInicio; hora < slotFim; hora++) {\n      horariosOcupados.add(hora);\n    }\n  }\n}\n\n// Gera os intervalos disponíveis entre 07:00 e 19:00, removendo os horários ocupados\nconst horarioDisponivel = [];\nfor (let hora = 7; hora < 19; hora++) {\n  if (!horariosOcupados.has(hora)) {\n    // Formata para ter dois dígitos, se necessário\n    const start = hora < 10 ? \"0\" + hora : hora;\n    const end = (hora + 1) < 10 ? \"0\" + (hora + 1) : (hora + 1);\n    horarioDisponivel.push(`${start}:00-${end}:00`);\n  }\n}\n\n// Cria a string final conforme desejado\nconst resultText = \"horarioDisponivel: \" + horarioDisponivel.join(\", \");\n\n// Retorna como array de objetos (JSON válido)\nreturn [{ horarioDisponivel: resultText }];",
        "height": 240,
        "width": 300,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5460,
        1120
      ],
      "id": "07f00922-52d4-46b9-b565-e351e36002fd",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Node-code separa horários disponíveis do calendário bloco de meia hora\n\n// Obtém a string dos eventos concatenados do input\nconst inputData = $json.concatenated_evento;\n\n// A data desejada pode vir do input ou assumir um padrão (ex.: \"2025-04-04\")\nconst diaDesejado = $json.date || \"2025-04-04\";\n\n// Regex para extrair os dados de cada agendamento\nconst regex = /id:\\s*([^,]+),\\s*data_comeco:\\s*([^,]+),\\s*data_fim:\\s*([^.]+)\\.\\s*Titulo:\\s*([^.,]+)/g;\n\n// Conjunto para armazenar os horários ocupados\nconst horariosOcupados = new Set();\nlet match;\n\nwhile ((match = regex.exec(inputData)) !== null) {\n  const dataComeco = match[2].trim();\n  // Considera somente os agendamentos que iniciam na data desejada\n  if (dataComeco.startsWith(diaDesejado)) {\n    // Processa a parte de início do evento\n    const timePartInicio = dataComeco.split(\"T\")[1];\n    const horaInicio = parseInt(timePartInicio.substring(0, 2));    \n    const minutosInicio = parseInt(timePartInicio.substring(3, 5));   \n    // Converte para slot de 30 minutos (cada hora possui 2 slots)\n    const slotInicio = horaInicio * 2 + (minutosInicio >= 30 ? 1 : 0);\n    \n    // Processa a parte de término do evento\n    const dataFim = match[3].trim();\n    const timePartFim = dataFim.split(\"T\")[1];\n    const horaFim = parseInt(timePartFim.substring(0, 2));    \n    const minutosFim = parseInt(timePartFim.substring(3, 5));   \n    const slotFim = horaFim * 2 + (minutosFim >= 30 ? 1 : 0);\n    \n    // Bloqueia todos os slots de 30 minutos entre o início e o término (slotFim não incluso)\n    for (let slot = slotInicio; slot < slotFim; slot++) {\n      horariosOcupados.add(slot);\n    }\n  }\n}\n\n// Gera os intervalos disponíveis entre 07:00 e 19:00, em blocos de 30 minutos\nconst horarioDisponivel = [];\n// Cada slot representa 30 minutos; de 07:00 (7*2 = 14) até 19:00 (19*2 = 38, não incluso)\nfor (let slot = 7 * 2; slot < 19 * 2; slot++) {\n  if (!horariosOcupados.has(slot)) {\n    const startHour = Math.floor(slot / 2);\n    const startMin = (slot % 2 === 0) ? \"00\" : \"30\";\n    const endSlot = slot + 1;\n    const endHour = Math.floor(endSlot / 2);\n    const endMin = (endSlot % 2 === 0) ? \"00\" : \"30\";\n    // Formata para ter dois dígitos, se necessário\n    const startStr = (startHour < 10 ? \"0\" + startHour : startHour) + \":\" + startMin;\n    const endStr = (endHour < 10 ? \"0\" + endHour : endHour) + \":\" + endMin;\n    horarioDisponivel.push(`${startStr}-${endStr}`);\n  }\n}\n\n// Cria a string final conforme desejado\nconst resultText = \"horarioDisponivel: \" + horarioDisponivel.join(\", \");\n\n// Retorna como array de objetos (JSON válido)\nreturn [{ horarioDisponivel: resultText }];",
        "height": 240,
        "width": 280,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5760,
        1120
      ],
      "id": "dc49b9bf-4766-4c62-9481-914031f1ea8c",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# Reagendar Reunião\n{\n  \"name\": \"reagendar_evento\",\n  \"description\": \"Reagenda o evento com nova data de início e fim, juntamente com assunto e descrição. Essa função é chamada quando o usuário informar que não poderá comparecer, cancelar ou pedir para reagendar o evento.\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"data_inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Nova data de início do evento no formato ISO 8601, por exemplo, 2025-09-19T00:00:00\"\n      },\n      \"data_fim\": {\n        \"type\": \"string\",\n        \"description\": \"Nova data de fim do evento no mesmo formato, que representa o término do evento\"\n      },\n      \"assunto\": {\n        \"type\": \"string\",\n        \"description\": \"Assunto do evento\"\n      },\n      \"descricao\": {\n        \"type\": \"string\",\n        \"description\": \"Descrição detalhada do evento\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"data_inicio\",\n      \"data_fim\",\n      \"assunto\",\n      \"descricao\"\n    ]\n  }\n}",
        "height": 240,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5140,
        1120
      ],
      "id": "6de45fbb-25d6-4a17-8875-283d4600b746",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3880,
        -580
      ],
      "id": "ebab4584-f6fd-4124-8dca-a976d1db06af",
      "name": "Separa dados calendar4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4320,
        -580
      ],
      "id": "ee2fd54d-6e20-4ffa-98b5-af079ba86dcd",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"reagendado: O seu evento foi reagendado com sucesso {{ $json.evento }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4540,
        -580
      ],
      "id": "ce1b534e-32db-42c4-b225-3ea8ca1c28ca",
      "name": "output4"
    },
    {
      "parameters": {
        "content": "# verifica horários v02\n{\n  \"name\": \"verifica_agendamentos\",\n  \"description\": \"Verifica os agendamentos existentes no intervalo diário (00:00 às 23:59) e filtra somente os que ocorrem dentro do horário comercial (07:00 às 19:00, com o último horário de marcação às 18:00), retornando os horários livres em blocos de 1h.\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de início do intervalo para verificação, no formato ISO 8601 (ex: 2025-09-19T00:00:00)\"\n      },\n      \"fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de fim do intervalo para verificação, no mesmo formato (ex: 2025-09-19T23:59:00)\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"inicio\",\n      \"fim\"\n    ]\n  }\n}",
        "height": 840,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5140,
        1640
      ],
      "id": "2fbe9c53-88aa-4b26-83af-22b9ca24141e",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "# Agendar reunião v02\n{\n  \"name\": \"agendar_reuniao\",\n  \"description\": \"Agenda uma reunião definindo data de início, data de fim (uma hora depois da data de início), assunto e descrição\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"data_inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data de início da reunião no formato ISO 8601, por exemplo, 2025-09-19T00:00:00\"\n      },\n      \"data_fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data de fim da reunião no mesmo formato, que deve ser uma hora após a data de início\"\n      },\n      \"assunto\": {\n        \"type\": \"string\",\n        \"description\": \"Assunto da reunião, no formato: Nome do procedimento <> Nome do cliente\"\n      },\n      \"descricao\": {\n        \"type\": \"string\",\n        \"description\": \"Descrição da reunião com os dados de contato (email e telefone)\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"data_inicio\",\n      \"data_fim\",\n      \"assunto\",\n      \"descricao\"\n    ]\n  }\n}",
        "height": 240,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5140,
        1380
      ],
      "id": "0d065862-f029-4524-a232-dbe192331a3a",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ff416a00-7729-4ef9-accb-b04329f96ca9",
              "leftValue": "={{ $json.available }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3440,
        -480
      ],
      "id": "69da4d94-0f9b-4721-9c88-de53f908dea6",
      "name": "If2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"reagendamento: esse horário não está disponível,Fale que acabou de conferir e viu que nao estava disponível\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4540,
        -380
      ],
      "id": "21a6c883-a9bd-4fb6-ba8f-4edc6a59394d",
      "name": "output5"
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "eventId": "={{ $('Escolhe Função1').item.json.arguments.eventID }}",
        "updateFields": {
          "end": "={{ $('Escolhe Função1').item.json.arguments.data_fim }}",
          "start": "={{ $('Escolhe Função1').item.json.arguments.data_inicio }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3660,
        -580
      ],
      "id": "31169462-a14c-4072-81fc-f8a68274742e",
      "name": "Google Calendar10",
      "credentials": {}
    },
    {
      "parameters": {
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "timeMin": "={{ $json.arguments.data_inicio }}",
        "timeMax": "={{ $json.arguments.data_fim }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3220,
        -480
      ],
      "id": "ae20cdfa-43c1-47ed-88db-55eded5fcf7f",
      "name": "verifica_evento_individual",
      "credentials": {}
    },
    {
      "parameters": {
        "content": "# Agendar reunião v03\n// Obtém a string dos eventos concatenados do input\nconst inputData = $json.concatenated_evento;\n// Define o dia desejado (pode vir do input, se não utiliza o padrão \"2025-04-15\")\nconst diaDesejado = $json.date || \"2025-04-15\";\n\n// Regex para extrair os dados de cada agendamento\nconst regex = /id:\\s*([^,]+),\\s*data_comeco:\\s*([^,]+),\\s*data_fim:\\s*([^.]+)\\.\\s*Titulo:\\s*([^.,]+)/g;\nconst eventos = [];\nlet match;\n\n// Para cada evento encontrado, extrai diretamente os valores de hora e minuto a partir da string\nwhile ((match = regex.exec(inputData)) !== null) {\n  const dataComecoStr = match[2].trim();\n  const dataFimStr = match[3].trim();\n  \n  // Considera somente os agendamentos do dia desejado, conforme a string de data\n  if (dataComecoStr.startsWith(diaDesejado)) {\n    // Extrai a parte do horário (HH:MM) da string\n    // Exemplo: \"2025-04-15T16:00:00-03:00\" -> pega \"16:00\"\n    const timePartInicio = dataComecoStr.split(\"T\")[1].substring(0, 5);\n    const timePartFim = dataFimStr.split(\"T\")[1].substring(0, 5);\n    \n    // Separa hora e minutos e converte para número\n    const [horaInicio, minutoInicio] = timePartInicio.split(\":\").map(Number);\n    const [horaFim, minutoFim] = timePartFim.split(\":\").map(Number);\n    \n    // Converte para total de minutos desde a meia-noite\n    const totalInicio = horaInicio * 60 + minutoInicio;\n    const totalFim = horaFim * 60 + minutoFim;\n    \n    eventos.push({ start: totalInicio, end: totalFim });\n  }\n}\n\n// Gera os intervalos disponíveis entre 07:00 e 19:00 (cada um com duração de 1 hora)\n// Para cada slot, verifica se há sobreposição com algum evento\nconst horarioDisponivel = [];\nfor (let hora = 7; hora < 19; hora++) {\n  const slotInicio = hora * 60;\n  const slotFim = (hora + 1) * 60;\n  \n  // Verifica se existe algum evento cujo horário se sobrepõe com o slot\n  const ocupado = eventos.some(ev => ev.start < slotFim && ev.end > slotInicio);\n  \n  if (!ocupado) {\n    // Formata o horário com dois dígitos, se necessário\n    const startStr = hora < 10 ? \"0\" + hora : \"\" + hora;\n    const endHour = hora + 1;\n    const endStr = endHour < 10 ? \"0\" + endHour : \"\" + endHour;\n    \n    horarioDisponivel.push(`${startStr}:00-${endStr}:00`);\n  }\n}\n\n// Cria a string final com os horários disponíveis\nconst resultText = \"horarioDisponivel: \" + horarioDisponivel.join(\", \");\nreturn [{ horarioDisponivel: resultText }];",
        "height": 240,
        "width": 280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5760,
        1640
      ],
      "id": "88511817-3681-4213-b4a3-708e7ec31da6",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -1840,
        -40
      ],
      "id": "9592e4fa-4b64-46f3-b03e-2a5a3ba35c72",
      "name": "Date & Time"
    },
    {
      "parameters": {
        "jsCode": "// message_chunker.js\n// Função para uso em Node (ex.: n8n Function Node) que recebe input via $json\n\n/**\n * Divide uma grande mensagem em chunks preservando listas intactas e calculando tempo por chunk.\n * Não separa textos no formato de disponibilidade de horários com emoji de relógio.\n * @param {string} text - O texto recebido como input.\n * @returns {{chunks: {paragraph: string, sequence_number: number, time: number}[]}}\n */\nfunction splitMessageIntoChunks(text) {\n  // Normaliza e trim\n  text = text.replace(/\\r\\n/g, \"\\n\").trim();\n\n  // Padrão de mensagem de disponibilidade de horários (ex.: ⏰ 10:00 ... pergunta)\n  const scheduleRegex = /^.+:\\n\\n(?:⏰.*\\n)+\\n?.*\\?$/m;\n  if (scheduleRegex.test(text)) {\n    return {\n      chunks: [{\n        paragraph: text,\n        sequence_number: 1,\n        time: calculateTempo(text)\n      }]\n    };\n  }\n\n  const chunks = [];\n  let seq = 1;\n  const blocks = text.split(/\\n{2,}/);\n\n  blocks.forEach(block => {\n    const lines = block.split(\"\\n\");\n    // Detecta listas com -, *, números ou emoji de relógio\n    const isList = lines.every(line =>\n      /^\\s*([-*]|\\d+\\.)\\s+/.test(line) || /^\\s*⏰/.test(line)\n    );\n\n    if (isList) {\n      const para = block.trim();\n      chunks.push({ paragraph: para, sequence_number: seq++, time: calculateTempo(para) });\n    } else {\n      const sentences = block.match(/[^.!?]+[.!?]+(?:\\s|$)/g) || [block];\n      let i = 0;\n      while (i < sentences.length) {\n        const groupSize = Math.min(sentences.length - i, 2 + Math.floor(Math.random() * 2));\n        const para = sentences.slice(i, i + groupSize).join(' ').trim();\n        chunks.push({ paragraph: para, sequence_number: seq++, time: calculateTempo(para) });\n        i += groupSize;\n      }\n    }\n  });\n\n  return { chunks };\n}\n\n/**\n * Calcula um tempo de digitação (ms) baseado no tamanho do texto,\n * mais rápido que humano mas com variação natural.\n * Valor base reduzido para produzir tempos menores.\n * @param {string} text\n * @returns {number}\n */\nfunction calculateTempo(text) {\n  const baseMsPerChar = 20; // reduzido de 60ms para 40ms por caractere\n  const variation = 0.8 + Math.random() * 0.4; // variação entre 0.8x e 1.2x\n  return Math.ceil(text.length * baseMsPerChar * variation);\n}\n\n// --- PONTO DE ENTRADA (e.g. n8n Function Node) ---\n// Usa o input informado: {{ $json.data[0].content[0].text.value }}\nconst text = $json.data[0].content[0].text.value;\n\n// Executa chunking com tempo individual\nconst { chunks } = splitMessageIntoChunks(text);\n\n// Retorna para o fluxo de dados\nreturn [{\n  json: { chunks }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1660,
        2740
      ],
      "id": "19806240-d8bd-42ba-b513-a985ae8c871b",
      "name": "Code6"
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1840,
        2740
      ],
      "id": "b116bac6-a47a-43bc-99c0-49c9014a263e",
      "name": "Split Out4",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "129cc250-d535-4d03-ab19-6a8ea2b775f7",
              "name": "chunks",
              "value": "={{ $json.paragraph }}",
              "type": "string"
            },
            {
              "id": "e1383b34-a6b8-4993-a644-cd6d2336b93e",
              "name": "delay",
              "value": "={{ $json.time }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2000,
        2740
      ],
      "id": "95e2944c-604d-4832-9828-dda13af2bcb9",
      "name": "Edit Fields13"
    },
    {
      "parameters": {
        "queue": "messages_clindermy",
        "options": {
          "arguments": {
            "argument": [
              {
                "key": "x-queue-type",
                "value": "quorum"
              }
            ]
          },
          "acknowledge": "executionFinishesSuccessfully",
          "jsonParseBody": true,
          "parallelMessages": -1
        }
      },
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        -5480,
        620
      ],
      "id": "c65757d5-42ec-4f99-84ee-0f4f60de1fc8",
      "name": "RabbitMQ Trigger",
      "credentials": {}
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b6a5fcec-175d-4242-8058-b084d6c69c5c",
              "name": "body",
              "value": "={{ $json.content.body }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5260,
        620
      ],
      "id": "ce2b154f-6012-47b9-95c1-33439a2d6a8e",
      "name": "Webhook"
    },
    {
      "parameters": {
        "jsCode": "// Define o número máximo de caracteres por chunk (ajuste conforme preferir)\nconst maxChars = 300;\n\n// Obtém o texto de entrada a partir do novo caminho\nconst longText = ($json.data && $json.data[0] && $json.data[0].content && $json.data[0].content[0] && $json.data[0].content[0].text && $json.data[0].content[0].text.value) || \"\";\n\n// Verifica se o texto possui características de mensagem de agendamento\nconst schedulingKeywords = [\"⏰\", \"Data:\", \"agendar\", \"disponíveis\"];\nconst isScheduling = schedulingKeywords.some(keyword => longText.includes(keyword));\n\n// Se for uma mensagem de agendamento, retorna o texto completo como único bloco\nif (isScheduling) {\n\treturn [{ chunks: [longText] }];\n}\n\n// Primeiramente, tenta dividir por parágrafos usando quebras duplas de linha\nlet initialChunks = longText.includes(\"\\n\\n\") ? longText.split(/\\n\\s*\\n/) : [longText];\n\n// Array para armazenar os chunks finais\nlet chunks = [];\n\n/**\n * Função auxiliar para dividir um parágrafo muito longo em blocos menores\n * utilizando a separação por sentenças.\n */\nfunction splitLongParagraph(paragraph) {\n  // Se o parágrafo já for menor que o limite, retorna como único chunk\n  if (paragraph.length <= maxChars) {\n    return [paragraph];\n  } else {\n    // Divide o parágrafo em sentenças usando uma regex que detecta pontuação final seguida de espaço e letra maiúscula\n    const sentences = paragraph.split(/(?<=[.?!])\\s+(?=[A-ZÀ-Ú])/);\n    let currentChunk = \"\";\n    let result = [];\n\n    sentences.forEach(sentence => {\n      const trimmedSentence = sentence.trim();\n      // Acumula sentenças enquanto o tamanho do bloco não ultrapasse o limite\n      if ((currentChunk + \" \" + trimmedSentence).trim().length <= maxChars) {\n        currentChunk = (currentChunk + \" \" + trimmedSentence).trim();\n      } else {\n        // Se já houver texto acumulado, salva o bloco e inicia um novo\n        if (currentChunk) {\n          result.push(currentChunk);\n          currentChunk = trimmedSentence;\n        } else {\n          // Caso uma única sentença ultrapasse o limite, força a divisão\n          result.push(trimmedSentence.slice(0, maxChars));\n          currentChunk = trimmedSentence.slice(maxChars);\n        }\n      }\n    });\n    // Adiciona o último bloco, se existir\n    if (currentChunk) result.push(currentChunk);\n    return result;\n  }\n}\n\n// Processa cada bloco inicial; se ultrapassar o limite, subdivide usando a função auxiliar\ninitialChunks.forEach(chunk => {\n  let trimmed = chunk.trim();\n  if (trimmed) {\n    if (trimmed.length > maxChars) {\n      let subChunks = splitLongParagraph(trimmed);\n      chunks = chunks.concat(subChunks);\n    } else {\n      chunks.push(trimmed);\n    }\n  }\n});\n\n// Retorna somente o array com os blocos personalizados\nreturn [{ chunks }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        3140
      ],
      "id": "23839e3c-ce69-411e-a67e-f955d5b65bf8",
      "name": "Code7",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "06d4116e-f6e4-442e-b1d6-56b611cb45db",
              "leftValue": "={{ $json['atendimento finalizado'] }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4800,
        620
      ],
      "id": "1ffe1102-8a59-4044-ba00-d8019b791cca",
      "name": "If1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -4580,
        960
      ],
      "id": "7f4201b3-b50b-444c-8fe4-fc2f887ea5e7",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -5480,
        -40
      ],
      "id": "fc635e36-8c8c-400e-9d9a-221541423835",
      "name": "Schedule Trigger",
      "disabled": true
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418625,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3994504,
                "value": "true "
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -5280,
        -80
      ],
      "id": "ad8032a2-8b12-4265-bfca-c1f4bd44c438",
      "name": "Baserow",
      "credentials": {}
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3994504,
              "fieldValue": "false"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -4760,
        -220
      ],
      "id": "36599e05-6b12-4af5-bfd5-afff22db2198",
      "name": "Baserow2",
      "credentials": {}
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "96080ee5-de5b-4aed-bbd1-51356bb34629",
              "leftValue": "={{ $json['Created on'] }}",
              "rightValue": "={{ $json[\"Created on\"].toDateTime().plus({ minutes: 3 }).toISO() }}",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5060,
        -80
      ],
      "id": "2d690290-3a79-47c1-8c46-04bb3aa9f1ad",
      "name": "If5"
    },
    {
      "parameters": {
        "content": "## atualiza atendimento \n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 600,
        "width": 1240
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5660,
        -400
      ],
      "id": "405e4fc5-326f-4dea-bb57-4dbaf4d5067a",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "returnAll": true,
        "timeMin": "2025-04-17T00:00:00",
        "timeMax": "2025-04-17T23:59:59",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -4380,
        -640
      ],
      "id": "155cb238-0791-4b3e-9375-16f93d60a7bb",
      "name": "Google Calendar",
      "credentials": {}
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "evento"
            }
          ]
        },
        "options": {
          "outputFormat": "singleItem"
        }
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        -3720,
        -640
      ],
      "id": "6d8b6b7e-be56-4878-8598-8a637134fb9b",
      "name": "Summarize2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"horarios_disponiveis_no_dia: {{ $json.horarioDisponivel }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3060,
        -640
      ],
      "id": "a73df7b9-f22b-4056-bdd1-8e9363153d8b",
      "name": "output3"
    },
    {
      "parameters": {
        "jsCode": "// 1. Parâmetros que você pode ajustar:\nconst businessStart = '08:00';      // início do expediente\nconst businessEnd   = '19:00';      // fim do expediente\nconst durationMinutes = 30;         // duração de cada slot em minutos\n\n// 2. Função para transformar \"HH:MM\" em minutos desde 00:00\nfunction toMin(t) {\n  const [h, m] = t.split(':').map(Number);\n  return h * 60 + m;\n}\n// e de volta\nfunction toTime(m) {\n  const hh = String(Math.floor(m/60)).padStart(2,'0');\n  const mm = String(m%60).padStart(2,'0');\n  return `${hh}:${mm}`;\n}\n\n// 3. Extrai events de uma string como:\n//    \"data_comeco: 2025-04-17T13:00:00-03:00, data_fim: 2025-04-17T13:30:00-03:00. ... \"\nconst raw = $json.concatenated_evento;\nconst re = /data_comeco:\\s*([\\d\\-T:\\.]+?),\\s*data_fim:\\s*([\\d\\-T:\\.]+)/g;\nlet m, events = [];\nwhile ((m = re.exec(raw))) {\n  // pega só a parte \"HH:MM\" após o \"T\"\n  const startHM = m[1].split('T')[1].substr(0,5);\n  const endHM   = m[2].split('T')[1].substr(0,5);\n  events.push({\n    start: toMin(startHM),\n    end:   toMin(endHM)\n  });\n}\n\n// 4. Ordena e gera intervalos livres\nevents.sort((a,b) => a.start - b.start);\nconst dayStart = toMin(businessStart);\nconst dayEnd   = toMin(businessEnd);\n\nlet freeIntervals = [];\nlet cursor = dayStart;\nfor (const ev of events) {\n  if (ev.start > cursor) {\n    freeIntervals.push({ start: cursor, end: ev.start });\n  }\n  cursor = Math.max(cursor, ev.end);\n}\nif (cursor < dayEnd) {\n  freeIntervals.push({ start: cursor, end: dayEnd });\n}\n\n// 5. Subdivide cada intervalo livre em slots de durationMinutes\nlet availableSlots = [];\nfor (const iv of freeIntervals) {\n  let s = iv.start;\n  while (s + durationMinutes <= iv.end) {\n    availableSlots.push(`${toTime(s)}-${toTime(s + durationMinutes)}`);\n    s += durationMinutes;\n  }\n}\n\n// 6. Retorna no formato desejado\nreturn [\n  {\n    json: {\n      horarios_disponiveis: availableSlots.join(',')\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3280,
        -640
      ],
      "id": "a8027a98-d38e-4c1b-8902-e0c664d87304",
      "name": "Code3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3940,
        -640
      ],
      "id": "0953ae25-47ef-4ced-a1c3-0365a8d14c55",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "dcd908df-43bf-4847-828c-7f6aeb865ee8",
              "leftValue": "={{ !!Object.keys($node[\"calendar \"].data).length }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4360,
        -2040
      ],
      "id": "a2f1eafe-560c-469c-9b36-140b47a8c8d4",
      "name": "If6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "d7a3c4c8-5729-4ead-983c-9ffae19666d8",
              "name": "htmlLink",
              "value": "={{ $json.htmlLink }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4580,
        -1940
      ],
      "id": "ef2176d2-11a7-4064-b5af-de70c121e40a",
      "name": "Separa dados calendar6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4800,
        -1940
      ],
      "id": "deddcb92-c3a1-46be-910b-03ba9e33a909",
      "name": "Edit Fields10"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"verificacao: o usuário possui os seguintes eventos,{{ $json.evento }}.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5020,
        -1940
      ],
      "id": "b128c5de-0c28-4dea-b6db-d1a1f7006569",
      "name": "output8"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "limit": 3,
        "timeMax": "={{ $now.plus({ week: 4 }) }}",
        "options": {
          "query": "={{ $json.arguments.descricao }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        4140,
        -2040
      ],
      "id": "4c4567d5-69ba-4ce9-a996-bf1949d511c1",
      "name": "calendar ",
      "alwaysOutputData": true,
      "credentials": {}
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"verificacao: o usuário não possui nenhum evento agendado.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5020,
        -2220
      ],
      "id": "2e2c2c43-e434-452d-90ed-23af6366854b",
      "name": "output9"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "start": "={{ $('Escolhe Função1').item.json.arguments.data_inicio }}",
        "end": "={{ $('Escolhe Função1').item.json.arguments.data_fim }}",
        "additionalFields": {
          "description": "={{ $('separa argumentos1').item.json.arguments.descricao }}",
          "summary": "={{ $('separa argumentos1').item.json.arguments.assunto }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -80,
        -3520
      ],
      "id": "3e976dae-8c70-4ef1-8f06-7936f35eb565",
      "name": "Google Calendar6",
      "credentials": {}
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        140,
        -3520
      ],
      "id": "ee7b8dbd-ae3a-4a02-b248-c02960263960",
      "name": "Separa dados calendar1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        360,
        -3520
      ],
      "id": "53dea34d-ce4d-4c27-8626-bdb9ac11b5b0",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"agendado: {{ $json.evento }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        580,
        -3520
      ],
      "id": "93f2748c-a35e-4aa3-9d92-edd1e0688125",
      "name": "output6"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "dcd908df-43bf-4847-828c-7f6aeb865ee8",
              "leftValue": "={{ !!Object.keys($node[\"calendar 10\"].data).length }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -300,
        -3420
      ],
      "id": "7bc29ac6-9aa8-4bb7-8891-8394cce1dee7",
      "name": "If7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "d7a3c4c8-5729-4ead-983c-9ffae19666d8",
              "name": "htmlLink",
              "value": "={{ $json.htmlLink }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        180,
        -3280
      ],
      "id": "f37c17a6-7ed7-4c29-a521-98f05d2408ab",
      "name": "Separa dados calendar7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        380,
        -3300
      ],
      "id": "9eda37ca-da9a-40e8-bbe3-f4cbd1ed737c",
      "name": "Edit Fields11"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"verificacao: o usuário possui os seguintes eventos,{{ $json.evento }}. Verifique se ele quer reagendar ou agendar um novo procedimento.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        580,
        -3300
      ],
      "id": "295e54dc-e9d4-437f-bb2b-e57beb2c3408",
      "name": "output10"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "limit": 3,
        "timeMax": "={{ $now.plus({ week: 4 }) }}",
        "options": {
          "query": "={{ $json.arguments.descricao }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -520,
        -3420
      ],
      "id": "780e2591-ca52-47ca-9d8b-ef7784a32785",
      "name": "calendar 10",
      "alwaysOutputData": true,
      "credentials": {}
    },
    {
      "parameters": {
        "content": "## backup agendar reunião antigo.\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 560,
        "width": 1740
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -740,
        -3640
      ],
      "id": "4ddd98e4-79bb-4392-a983-1d193697bc6a",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4160,
        -640
      ],
      "id": "9073dfad-a7e3-483a-85d6-9a027e1fb2dc",
      "name": "Separa dados calendar5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5cc661a5-e14c-49f8-95bb-61ac66512b90",
              "name": "concatenated_evento",
              "value": "={{ $json.concatenated_evento }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3500,
        -640
      ],
      "id": "60d8f53b-b1c7-4800-96dc-14022edbf218",
      "name": "Edit Fields7"
    },
    {
      "parameters": {
        "content": "## código que crie lista de horario de 30 em 30 min considerando fuso\n\n\n\n\n\n\n\n\n\n\n\n\n// 1) Extrai eventos via regex\nconst raw = $json.concatenated_evento;\nconst regex = /data_comeco:\\s*([\\d\\-T:+]+),\\s*data_fim:\\s*([\\d\\-T:+]+)/g;\nlet m, events = [];\nwhile (m = regex.exec(raw)) {\n  events.push({ start: m[1], end: m[2] });\n}\n\n// 2) Define dia e horário útil 08:00–19:00 ( São Paulo = -03:00 )\nconst date = events[0].start.slice(0,10);      // \"2025-04-16\"\nconst tz   = '-03:00';\nconst businessStart = new Date(`${date}T08:00:00${tz}`);\nconst businessEnd   = new Date(`${date}T19:00:00${tz}`);\n\n// 3) Gera slots de 30 min\nconst slotMinutes = 30;\nlet cursor = new Date(businessStart);\nconst allSlots = [];\nwhile (cursor < businessEnd) {\n  allSlots.push(new Date(cursor));\n  cursor.setMinutes(cursor.getMinutes() + slotMinutes);\n}\n\n// 4) Filtra fora dos blocos ocupados\nconst available = allSlots.filter(slot => {\n  const t = slot.getTime();\n  return !events.some(ev => {\n    const startT = new Date(ev.start).getTime();\n    const endT   = new Date(ev.end).getTime();\n    return t >= startT && t < endT;\n  });\n});\n\n// 5) Formata HH:mm, remove duplicatas só por garantia e junta em vírgula\nconst times = Array.from(new Set(\n  available.map(s =>\n    s.toLocaleTimeString('pt-BR', { hour:'2-digit', minute:'2-digit', timeZone:'America/Sao_Paulo' })\n  )\n));\nconst horario_disponivel = times.join(', ');\n\n// 6) Retorna único item com a lista\nreturn [\n  { json: { horario_disponivel } }\n];",
        "height": 320,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5460,
        1900
      ],
      "id": "a398d096-1a33-4373-b3e6-8a9131e9c939",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "jsCode": "// 1) Extrai eventos via regex\nconst raw = $json.concatenated_evento;\nconst regex = /data_comeco:\\s*([\\d\\-T:+]+),\\s*data_fim:\\s*([\\d\\-T:+]+)/g;\nlet m, events = [];\nwhile (m = regex.exec(raw)) {\n  events.push({ start: m[1], end: m[2] });\n}\n\n// 2) Define dia e horário útil 08:00–19:00 ( São Paulo = -03:00 )\nconst date = events[0].start.slice(0,10);      // \"2025-04-16\"\nconst tz   = '-03:00';\nconst businessStart = new Date(`${date}T08:00:00${tz}`);\nconst businessEnd   = new Date(`${date}T19:00:00${tz}`);\n\n// 3) Gera slots de 30 min\nconst slotMinutes = 30;\nlet cursor = new Date(businessStart);\nconst allSlots = [];\nwhile (cursor < businessEnd) {\n  allSlots.push(new Date(cursor));\n  cursor.setMinutes(cursor.getMinutes() + slotMinutes);\n}\n\n// 4) Filtra fora dos blocos ocupados\nconst available = allSlots.filter(slot => {\n  const t = slot.getTime();\n  return !events.some(ev => {\n    const startT = new Date(ev.start).getTime();\n    const endT   = new Date(ev.end).getTime();\n    return t >= startT && t < endT;\n  });\n});\n\n// 5) Formata HH:mm, remove duplicatas só por garantia e junta em vírgula\nconst times = Array.from(new Set(\n  available.map(s =>\n    s.toLocaleTimeString('pt-BR', { hour:'2-digit', minute:'2-digit', timeZone:'America/Sao_Paulo' })\n  )\n));\nconst horario_disponivel = times.join(', ');\n\n// 6) Retorna único item com a lista\nreturn [\n  { json: { horario_disponivel } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5380,
        2040
      ],
      "id": "22484bea-74eb-4c00-b97d-f43e1acb1c94",
      "name": "Code4"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "returnAll": true,
        "timeMin": "={{ $json.arguments.inicio }}",
        "timeMax": "={{ $json.arguments.fim }}",
        "options": {
          "timeZone": {
            "__rl": true,
            "value": "America/Sao_Paulo",
            "mode": "list",
            "cachedResultName": "America/Sao_Paulo"
          }
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -700,
        -4000
      ],
      "id": "5c08f222-4780-4c00-be35-fbc28b5d0304",
      "name": "Google Calendar7",
      "alwaysOutputData": true,
      "credentials": {},
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "evento"
            }
          ]
        },
        "options": {
          "outputFormat": "singleItem"
        }
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        -40,
        -4000
      ],
      "id": "27e51a17-cfe6-43c2-a3f1-9a182e15e882",
      "name": "Summarize3"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"horarios_disponiveis_no_dia: {{ $json.horario_disponivel }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        400,
        -4000
      ],
      "id": "8f5f6392-a725-4988-a5ba-290a8921d5b1",
      "name": "output7"
    },
    {
      "parameters": {
        "jsCode": "// 1) Extrai eventos via regex\nconst raw = $json.concatenated_evento;\nconst regex = /data_comeco:\\s*([\\d\\-T:+]+),\\s*data_fim:\\s*([\\d\\-T:+]+)/g;\nlet m, events = [];\nwhile (m = regex.exec(raw)) {\n  events.push({ start: m[1], end: m[2] });\n}\n\n// 2) Define dia e horário útil 08:00–19:00 ( São Paulo = -03:00 )\nconst date = events[0].start.slice(0,10);      // \"2025-04-16\"\nconst tz   = '-03:00';\nconst businessStart = new Date(`${date}T08:00:00${tz}`);\nconst businessEnd   = new Date(`${date}T19:00:00${tz}`);\n\n// 3) Gera slots de 30 min\nconst slotMinutes = 30;\nlet cursor = new Date(businessStart);\nconst allSlots = [];\nwhile (cursor < businessEnd) {\n  allSlots.push(new Date(cursor));\n  cursor.setMinutes(cursor.getMinutes() + slotMinutes);\n}\n\n// 4) Filtra fora dos blocos ocupados\nconst available = allSlots.filter(slot => {\n  const t = slot.getTime();\n  return !events.some(ev => {\n    const startT = new Date(ev.start).getTime();\n    const endT   = new Date(ev.end).getTime();\n    return t >= startT && t < endT;\n  });\n});\n\n// 5) Formata HH:mm, remove duplicatas só por garantia e junta em vírgula\nconst times = Array.from(new Set(\n  available.map(s =>\n    s.toLocaleTimeString('pt-BR', { hour:'2-digit', minute:'2-digit', timeZone:'America/Sao_Paulo' })\n  )\n));\nconst horario_disponivel = times.join(', ');\n\n// 6) Retorna único item com a lista\nreturn [\n  { json: { horario_disponivel } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        180,
        -4000
      ],
      "id": "94c3fad3-9505-488b-b444-2c052b555279",
      "name": "Code5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -480,
        -4000
      ],
      "id": "242ffb58-46d7-47f6-bf8d-ecf6eed7acd4",
      "name": "Separa dados calendar3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }},  data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -260,
        -4000
      ],
      "id": "732855f2-33ff-4f57-a03e-fe4209c2fdbc",
      "name": "Edit Fields9"
    },
    {
      "parameters": {
        "content": "## backupverificar horarios\n\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 340,
        "width": 1740
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -760,
        -4140
      ],
      "id": "55b14d2a-f36a-4ebf-bf2c-822dd8534cf9",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cbe1040-ee6b-4c50-80be-d6b263dd9727",
              "name": "concatenated_evento",
              "value": "={{ $json.concatenated_evento }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4140,
        -1540
      ],
      "id": "2584c33a-7922-4ecc-9c45-17545163fce3",
      "name": "Edit Fields12"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"mensagem enviada com sucesso.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5300,
        -2620
      ],
      "id": "e1b8fee0-df0b-4459-babc-b77de3e86a1e",
      "name": "output11"
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418625,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3210935,
                "value": "={{ $json.arguments.phone_number }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3000,
        -2620
      ],
      "id": "f56b91ab-13cc-44c4-a59c-ab61b1069ad2",
      "name": "Baserow5",
      "credentials": {},
      "disabled": true
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3994504,
              "fieldValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3720,
        -2620
      ],
      "id": "a8ae2584-6dda-40a2-b17d-0cc2c0a8c2b2",
      "name": "Baserow6",
      "credentials": {},
      "disabled": true
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "aimaze",
        "remoteJid": "=120363418674438624@g.us",
        "messageText": "=Atendimento Agendado ✅\n--\n{{ $('Escolhe Função1').item.json.arguments.servico_cliente }}\n{{ $('Escolhe Função1').item.json.arguments.descricao }}\n\nlink:{{ $('Escolhe Função1').item.json.arguments.link }}\nnumero: {{ $('Escolhe Função1').item.json.arguments.fone_number }}",
        "options_message": {
          "delay": 1200,
          "linkPreview": false
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        4400,
        -2620
      ],
      "id": "cedf3224-9d61-41ad-828d-733fe0388411",
      "name": "Evolution API3",
      "credentials": {}
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418625,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3210935,
                "value": "={{ $json.arguments.phone_number }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2780,
        -3100
      ],
      "id": "dccc0ef7-9984-456d-82cd-2d100fce9f30",
      "name": "Baserow7",
      "credentials": {}
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3994504,
              "fieldValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3000,
        -3100
      ],
      "id": "31560994-aecf-4d6e-857d-a3efabda419b",
      "name": "Baserow8",
      "credentials": {}
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"Atendimento encerrado. Muito obrigado, qualquer dúvida estou a disposição.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5260,
        -3060
      ],
      "id": "1ee7dea4-f8d0-46b0-9dcd-aab31750806b",
      "name": "output12"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d4b2a295-b0f4-4f44-9951-40b3d6e31625",
              "name": "text",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1460,
        3340
      ],
      "id": "837c75cb-3fb7-4c94-bccc-5c7731b2757b",
      "name": "Edit Fields14"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        3340
      ],
      "id": "b8fbdbd9-8376-40b6-9efc-da8782765ce7",
      "name": "Code8"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Merge - user').item.json.thread_id }}/messages?order=desc",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "faf6e9d6-b4a6-454d-9ef1-14cae12160fa",
      "name": "Pega a ultima mensagem1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1300,
        4240
      ],
      "credentials": {}
    },
    {
      "parameters": {
        "jsCode": "// message_chunker.js\n// Função para uso em Node (ex.: n8n Function Node) que recebe input via $json\n\n/**\n * Divide uma grande mensagem em chunks preservando listas intactas e calculando tempo por chunk.\n * Não separa textos no formato de disponibilidade de horários com emoji de relógio.\n * @param {string} text - O texto recebido como input.\n * @returns {{chunks: {paragraph: string, sequence_number: number, time: number}[]}}\n */\nfunction splitMessageIntoChunks(text) {\n  // Normaliza e trim\n  text = text.replace(/\\r\\n/g, \"\\n\").trim();\n\n  // Padrão de mensagem de disponibilidade de horários (ex.: ⏰ 10:00 ... pergunta)\n  const scheduleRegex = /^.+:\\n\\n(?:⏰.*\\n)+\\n?.*\\?$/m;\n  if (scheduleRegex.test(text)) {\n    return {\n      chunks: [{\n        paragraph: text,\n        sequence_number: 1,\n        time: calculateTempo(text)\n      }]\n    };\n  }\n\n  const chunks = [];\n  let seq = 1;\n  const blocks = text.split(/\\n{2,}/);\n\n  blocks.forEach(block => {\n    const lines = block.split(\"\\n\");\n    // Detecta listas com -, *, números ou emoji de relógio\n    const isList = lines.every(line =>\n      /^\\s*([-*]|\\d+\\.)\\s+/.test(line) || /^\\s*⏰/.test(line)\n    );\n\n    if (isList) {\n      const para = block.trim();\n      chunks.push({ paragraph: para, sequence_number: seq++, time: calculateTempo(para) });\n    } else {\n      const sentences = block.match(/[^.!?]+[.!?]+(?:\\s|$)/g) || [block];\n      let i = 0;\n      while (i < sentences.length) {\n        const groupSize = Math.min(sentences.length - i, 2 + Math.floor(Math.random() * 2));\n        const para = sentences.slice(i, i + groupSize).join(' ').trim();\n        chunks.push({ paragraph: para, sequence_number: seq++, time: calculateTempo(para) });\n        i += groupSize;\n      }\n    }\n  });\n\n  return { chunks };\n}\n\n/**\n * Calcula um tempo de digitação (ms) baseado no tamanho do texto,\n * mais rápido que humano mas com variação natural.\n * Valor base reduzido para produzir tempos menores.\n * @param {string} text\n * @returns {number}\n */\nfunction calculateTempo(text) {\n  const baseMsPerChar = 15; // reduzido de 60ms para 40ms por caractere\n  const variation = 0.8 + Math.random() * 0.4; // variação entre 0.8x e 1.2x\n  return Math.ceil(text.length * baseMsPerChar * variation);\n}\n\n// --- PONTO DE ENTRADA (e.g. n8n Function Node) ---\n// Usa o input informado: {{ $json.data[0].content[0].text.value }}\nconst text = $json.data[0].content[0].text.value;\n\n// Executa chunking com tempo individual\nconst { chunks } = splitMessageIntoChunks(text);\n\n// Retorna para o fluxo de dados\nreturn [{\n  json: { chunks }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1580,
        4240
      ],
      "id": "039724ce-0a5b-46ed-92f8-987320222b10",
      "name": "Code9"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        4600
      ],
      "id": "375b2662-5283-426e-b404-831c1f569084",
      "name": "Code10"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        4680
      ],
      "id": "a5b63a3a-48e8-4f34-8c5c-fd0a2871a618",
      "name": "Code11"
    }
  ],
  "connections": {
    "Usuário Existe?": {
      "main": [
        [
          {
            "node": "Merge - user",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Cria o usuário que nao foi encontrado no grupo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca participantes do grupo de teste": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cria o usuário que nao foi encontrado no grupo": {
      "main": [
        [
          {
            "node": "Merge - user",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Cria a thread": {
      "main": [
        [
          {
            "node": "Adiciona Thread ao usuário",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adiciona Thread ao usuário": {
      "main": [
        [
          {
            "node": "Merge - user",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Audio Base": {
      "main": [
        [
          {
            "node": "Convert to File6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File6": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Message from Audio3": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Base": {
      "main": [
        [
          {
            "node": "Convert to File7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File7": {
      "main": [
        [
          {
            "node": "OpenAI8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set Message from image": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Set Message from image4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Message from image4": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Info Base1": {
      "main": [
        [
          {
            "node": "Pega Base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pega Base": {
      "main": [
        [
          {
            "node": "Convert to File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GroqTranscreve1": {
      "main": [
        [
          {
            "node": "Set Message from Audio1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File2": {
      "main": [
        [
          {
            "node": "GroqTranscreve1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "listar mensagens2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verifica se o usuário mandou mais mensagens1": {
      "main": [
        [
          {
            "node": "Executa uma Run - Aqui está o assistant",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Se for mandado o fluxo  é encerrado1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Set Message from Audio3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI8": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens2": {
      "main": [
        [
          {
            "node": "Verifica se o usuário mandou mais mensagens1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Possui Thread?": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Cria a thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cria a mensagem": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "listar mensagens3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens3": {
      "main": [
        [
          {
            "node": "cancel run1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Convert to File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File3": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cancel run1": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge - user": {
      "main": [
        [
          {
            "node": "Possui Thread?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Cria a mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Set Message from image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Audio Base",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Image Base",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pega a ultima mensagem": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File3": {
      "main": [
        []
      ]
    },
    "Envia resposta em Audio1": {
      "main": [
        [
          {
            "node": "Extract from File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Completion - Formatter": {
      "main": [
        [
          {
            "node": "Separa Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa Chunks": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buffer": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        []
      ]
    },
    "Loop Over Items5": {
      "main": [
        [
          {
            "node": "Fim",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Evolution API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "separa argumentos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "separa argumentos1": {
      "main": [
        [
          {
            "node": "Escolhe Função1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        [],
        [
          {
            "node": "Pega a ultima mensagem",
            "type": "main",
            "index": 0
          }
        ],
        [],
        []
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Get Run Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Run Status": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Executa uma Run - Aqui está o assistant": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escolhe Função1": {
      "main": [
        [
          {
            "node": "Google Calendar4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Calendar3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "verifica_evento_individual",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Calendar5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "calendar ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow1": {
      "main": [
        [
          {
            "node": "Prepara outpoot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepara outpoot": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Set tool call id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set tool call id": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow3": {
      "main": [
        [
          {
            "node": "Prepara outpoot1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepara outpoot1": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow4": {
      "main": [
        [
          {
            "node": "Prepara outpoot2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepara outpoot2": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Envia resposta em Audio1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Buffer1": {
      "main": [
        [
          {
            "node": "Loop Over Items6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items6": {
      "main": [
        [
          {
            "node": "Fim1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Evolution API1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out3": {
      "main": [
        [
          {
            "node": "Loop Over Items6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Out3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow - Get User": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evolution API1": {
      "main": [
        [
          {
            "node": "Buffer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evolution API": {
      "main": [
        [
          {
            "node": "Buffer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar3": {
      "main": [
        [
          {
            "node": "Separa dados calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar4": {
      "main": [
        [
          {
            "node": "Separa dados calendar2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize1": {
      "main": [
        [
          {
            "node": "Edit Fields12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar5": {
      "main": [
        [
          {
            "node": "output2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output1": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output2": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar2": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Summarize1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar4": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "output4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output4": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Google Calendar10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "output5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output5": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar10": {
      "main": [
        [
          {
            "node": "Separa dados calendar4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "verifica_evento_individual": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Split Out4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out4": {
      "main": [
        [
          {
            "node": "Edit Fields13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields13": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RabbitMQ Trigger": {
      "main": [
        [
          {
            "node": "Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Baserow - Get User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Usuário Existe?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Baserow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Baserow2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow2": {
      "main": [
        []
      ]
    },
    "Summarize2": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "output3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Summarize2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "main": [
        [
          {
            "node": "Separa dados calendar5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "output9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Separa dados calendar6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar6": {
      "main": [
        [
          {
            "node": "Edit Fields10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields10": {
      "main": [
        [
          {
            "node": "output8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calendar ": {
      "main": [
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar6": {
      "main": [
        [
          {
            "node": "Separa dados calendar1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar1": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "output6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "Google Calendar6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Separa dados calendar7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar7": {
      "main": [
        [
          {
            "node": "Edit Fields11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields11": {
      "main": [
        [
          {
            "node": "output10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calendar 10": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output8": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output9": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar5": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar7": {
      "main": [
        [
          {
            "node": "Separa dados calendar3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize3": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "output7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar3": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        [
          {
            "node": "Summarize3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields12": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output11": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow5": {
      "main": [
        [
          {
            "node": "Baserow6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow6": {
      "main": [
        [
          {
            "node": "Evolution API3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evolution API3": {
      "main": [
        [
          {
            "node": "output11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow7": {
      "main": [
        [
          {
            "node": "Baserow8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow8": {
      "main": [
        [
          {
            "node": "output12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output12": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output7": {
      "main": [
        []
      ]
    },
    "Edit Fields14": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pega a ultima mensagem1": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "calendar 10": [
      {
        "json": {
          "id": "etliuv8dlbj4eg53gb68ve81a4",
          "summary": "Limpeza de pele <> João Reis",
          "start": {
            "dateTime": "2025-04-17T09:00:00-03:00",
            "timeZone": "America/Sao_Paulo"
          },
          "end": {
            "dateTime": "2025-04-17T10:00:00-03:00",
            "timeZone": "America/Sao_Paulo"
          },
          "creator": {
            "email": "aimazemachine@gmail.com",
            "self": true
          },
          "organizer": {
            "email": "aimazemachine@gmail.com",
            "self": true
          },
          "description": "553899225622",
          "created": "2025-04-16T23:17:17.000Z",
          "updated": "2025-04-16T23:17:17.097Z",
          "etag": "\"3489690874194878\"",
          "eventType": "default",
          "htmlLink": "https://www.google.com/calendar/event?eid=ZXRsaXV2OGRsYmo0ZWc1M2diNjh2ZTgxYTQgYWltYXplbWFjaGluZUBt",
          "iCalUID": "etliuv8dlbj4eg53gb68ve81a4@google.com",
          "kind": "calendar#event",
          "reminders": {
            "useDefault": true
          },
          "sequence": 0,
          "status": "confirmed"
        }
      }
    ],
    "RabbitMQ Trigger": [
      {
        "json": {
          "fields": {
            "consumerTag": "amq.ctag-cop2GgdhB67vKbk_9YVH4Q",
            "deliveryTag": 45,
            "redelivered": false,
            "exchange": "",
            "routingKey": "messages_clindermy"
          },
          "properties": {
            "headers": {}
          },
          "content": {
            "headers": {
              "host": "webhooks.aimaze.com.br",
              "user-agent": "axios/1.7.9",
              "content-length": "850",
              "accept-encoding": "gzip, compress, deflate, br",
              "content-type": "application/json",
              "x-forwarded-for": "178.156.151.68",
              "x-forwarded-host": "webhooks.aimaze.com.br",
              "x-forwarded-port": "443",
              "x-forwarded-proto": "https",
              "x-forwarded-server": "traefik_traefik.1",
              "x-real-ip": "178.156.151.68"
            },
            "params": {},
            "query": {},
            "body": {
              "event": "messages.upsert",
              "instance": "aimaze",
              "data": {
                "key": {
                  "remoteJid": "553899191590@s.whatsapp.net",
                  "fromMe": false,
                  "id": "F457008B52B28E2B168437498E617835"
                },
                "pushName": "Agatha Oliveira",
                "status": "DELIVERY_ACK",
                "message": {
                  "conversation": "Testa  e pálpebras",
                  "messageContextInfo": {
                    "deviceListMetadata": {
                      "recipientKeyHash": "NdY11wxThFB4Ow==",
                      "recipientTimestamp": "1744650225"
                    },
                    "deviceListMetadataVersion": 2,
                    "messageSecret": "oobYiv/0VLbdpRgJexG/iYSiTiaJmtzGLF+JQv6xels="
                  }
                },
                "messageType": "conversation",
                "messageTimestamp": 1745009669,
                "instanceId": "0d2743da-178c-41ea-a451-387c6dcd81b1",
                "source": "android"
              },
              "destination": "https://webhooks.aimaze.com.br/webhook/pixeomachine",
              "date_time": "2025-04-18T17:54:29.647Z",
              "sender": "553187712022@s.whatsapp.net",
              "server_url": "https://wsapi.clindermy.aimaze.com.br",
              "apikey": "C20C6E36A318-4F67-9204-89A641D4A789"
            },
            "webhookUrl": "https://webhooks.aimaze.com.br/webhook/pixeomachine",
            "executionMode": "production"
          }
        }
      }
    ],
    "Pega a ultima mensagem1": [
      {
        "json": {
          "object": "list",
          "data": [
            {
              "id": "msg_YR0V1vt78nH9fmEjQefDn87C",
              "object": "thread.message",
              "created_at": 1745009679,
              "assistant_id": "asst_DSNuWrewEP9RPrXcAWQCvnBR",
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": "run_dFqEiSPXq1JC9zGLYAwbSplg",
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "Agatha, na segunda-feira de manhã temos esses horários disponíveis:\n\n⏰ 10:00\n⏰ 10:30\n⏰ 11:00\n\nQual horário fica melhor pra você?",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_8KPjwAJAy5iSBQxJaGQuWvtl",
              "object": "thread.message",
              "created_at": 1745009671,
              "assistant_id": null,
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": null,
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "# informação do dia atual e os dias da semana.\n\nData e hora atual: 18-04-2025 17:54:31: Friday\n- 19-04-2025: Saturday\n- 20-04-2025: Sunday\n- 21-04-2025: Monday\n- 22-04-2025: Tuesday\n------------\n#dados do usuário\nNome do usuário: Agatha Oliveira\nTelefone: 553899191590\nMensagem do usuário: Testa  e pálpebras",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_TyJoMLQUgfHHGMky9gwZ8DYM",
              "object": "thread.message",
              "created_at": 1745009624,
              "assistant_id": "asst_DSNuWrewEP9RPrXcAWQCvnBR",
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": "run_1laiISP6INvz4JkE4TeEMQ2O",
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "Agatha, que bom que quer cuidar do Botox! Posso saber se é para alguma região específica do rosto? Isso ajuda a gente a personalizar certinho o procedimento pra você. 😊",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_gcFrDBjX3hRJN3IuEWRT6I9s",
              "object": "thread.message",
              "created_at": 1745009621,
              "assistant_id": null,
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": null,
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "# informação do dia atual e os dias da semana.\n\nData e hora atual: 18-04-2025 17:53:41: Friday\n- 19-04-2025: Saturday\n- 20-04-2025: Sunday\n- 21-04-2025: Monday\n- 22-04-2025: Tuesday\n------------\n#dados do usuário\nNome do usuário: Agatha Oliveira\nTelefone: 553899191590\nMensagem do usuário: Gostaria de marcar uma cessão de Botox",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_OWpJ3Ewf9cIid8oWwocUkOtl",
              "object": "thread.message",
              "created_at": 1745009568,
              "assistant_id": "asst_DSNuWrewEP9RPrXcAWQCvnBR",
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": "run_a5se9EAksBcRga5Y6h9soaMN",
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "Boa noite, Agatha! Eu sou Camila, a nova atendente da Clin Dermy. Como posso ajudar você hoje? 😊",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_wj8BRq7AHsrij2GHjq4xs0Rr",
              "object": "thread.message",
              "created_at": 1745009564,
              "assistant_id": null,
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": null,
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "# informação do dia atual e os dias da semana.\n\nData e hora atual: 18-04-2025 17:52:44: Friday\n- 19-04-2025: Saturday\n- 20-04-2025: Sunday\n- 21-04-2025: Monday\n- 22-04-2025: Tuesday\n------------\n#dados do usuário\nNome do usuário: Agatha Oliveira\nTelefone: 553899191590\nMensagem do usuário: Boa Noite!",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            }
          ],
          "first_id": "msg_YR0V1vt78nH9fmEjQefDn87C",
          "last_id": "msg_wj8BRq7AHsrij2GHjq4xs0Rr",
          "has_more": false
        }
      }
    ]
  },
  "versionId": "99a03322-196b-49d5-bdbe-35cac5f6d6e9",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-01-03T00:21:36.014Z",
      "updatedAt": "2025-01-03T00:21:36.014Z",
      "id": "hi69d8K45xRFQtMr",
      "name": "Book Keeper"
    }
  ]
}