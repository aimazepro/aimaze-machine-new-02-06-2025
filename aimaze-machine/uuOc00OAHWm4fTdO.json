{
  "createdAt": "2025-05-05T19:49:14.558Z",
  "updatedAt": "2025-05-05T19:49:14.558Z",
  "id": "uuOc00OAHWm4fTdO",
  "name": "Automaster-master- ultima versão 04-05-2025 16:49",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $json.data[0].thread_id }}/runs/{{ $json.first_id }}/cancel",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "id": "af2623fc-d5ae-4796-b44a-be17e770fc1e",
      "name": "Cancela a Run",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3960,
        1400
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e9f99497-32dd-448b-a4db-f8d1b19b0bc4",
              "leftValue": "={{ !!Object.keys($node[\"Baserow - Get User\"].data).length }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ec936c9a-a360-4ca8-ade0-dabd6ca3be2d",
      "name": "Usuário Existe?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -4520,
        600
      ]
    },
    {
      "parameters": {
        "url": "https://evolution.pixeo.com.br/group/participants/pixeomkt",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "groupJid",
              "value": "120363329938537038@g.us"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "8dcb88713769e3f1e202283bf1bea161"
            }
          ]
        },
        "options": {}
      },
      "id": "cad52e29-28fb-4aeb-99c5-98874fac3e61",
      "name": "Busca participantes do grupo de teste",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4660,
        1620
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "6811d2e5-c1b8-41bd-887e-bb4b36d9475d",
      "name": "Loop Over Items2",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4440,
        1620
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8b1370e9-656d-4b67-b892-17eaab246e8e",
              "leftValue": "=",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8f60a7e8-9dc8-47c2-95ab-b36d8511b116",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -4200,
        1640
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "databaseId": 168854,
        "tableId": 418625,
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3210935,
              "fieldValue": "={{ $('Webhook').item.json.body.data.key.remoteJid.split('@') [0]  }}"
            },
            {
              "fieldId": 3210936,
              "fieldValue": "={{ $('Webhook').item.json.body.data.pushName }}"
            }
          ]
        }
      },
      "id": "93af1f7f-40ff-4e54-9db2-ed4d5f680857",
      "name": "Cria o usuário que nao foi encontrado no grupo",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -4240,
        760
      ],
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "content": "## Esse nó, confere se o usuário está em algum grupo\n\n**Esse nó faz a verificação se o usuário está cadastrado em\nalgum grupo e se ele estiver ele adiciona no banco de\ndados no Baserow**\n",
        "height": 540.5823932582209,
        "width": 1044.9827482398446
      },
      "id": "54ba7ad7-db7a-4075-abd9-a5967fe06c53",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4760,
        1360
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/threads",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "0b3fd489-34b0-46d6-be23-e1ee8a6823da",
      "name": "Cria a thread",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3720,
        840
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $('Possui Thread?').item.json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3210932,
              "fieldValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "id": "047ba489-4435-4c49-9cf7-50d8a69acf2b",
      "name": "Adiciona Thread ao usuário",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -3720,
        1060
      ],
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "content": "## Verifica e Cria a Thread \nVerifica primeiro se o usuário possui Thread\nSe ele não tive thread é criado a thread\nDepois é atualizado no banco de dados",
        "height": 871.6710379321053,
        "width": 299.38680557696205
      },
      "id": "a6a47c88-bf6b-4372-90ce-2adf53e58de6",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4260,
        420
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5ae8cba9-3d8c-465b-b5b0-69493b7e4e91",
              "name": "=base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9c45790a-ec2d-4eb2-a0ee-f44e7e5c1c5d",
      "name": "Audio Base",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3080,
        760
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "=base64",
        "options": {
          "fileName": "audio.mp3",
          "mimeType": "audio/mpeg"
        }
      },
      "id": "6c0f4afa-03bc-4376-9790-bf80d3440cfe",
      "name": "Convert to File6",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2900,
        760
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99667d07-ff62-4627-9136-64622c85c979",
              "name": "FinalTranscripition",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ff340f46-9eab-44af-b2aa-88c3cfaf446d",
      "name": "Set Message from Audio3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2560,
        760
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5ae8cba9-3d8c-465b-b5b0-69493b7e4e91",
              "name": "=base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "bd01a2ff-bcd2-4881-8f39-e53002045c7b",
      "name": "Image Base",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3060,
        1380
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "image.png",
          "mimeType": "image/png"
        }
      },
      "id": "efeb6e7a-fb26-42b2-972a-dd40d50b02f7",
      "name": "Convert to File7",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2920,
        1380
      ]
    },
    {
      "parameters": {
        "content": "## Identifica e transcreve as imagens",
        "height": 227.11653913117755,
        "width": 809.4697158869521
      },
      "id": "8b86331b-878f-4c98-ac55-8aec3a97200a",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        1320
      ]
    },
    {
      "parameters": {
        "content": "## Identifica e transcreve os áudios",
        "height": 255.41432385368404,
        "width": 729.2230537404986,
        "color": 4
      },
      "id": "5a42c2e8-8202-48b1-99e0-cc4451f696a6",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "6ddb5b65-3522-4a08-8a0e-2446f0d6c57d",
              "leftValue": "={{ $json.FinalTranscripition }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "f1b48e9a-a982-4895-bea2-0810fb58e47b",
      "name": "If4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -2140,
        1040
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99667d07-ff62-4627-9136-64622c85c979",
              "name": "FinalTranscripition",
              "value": "={{ $('Webhook').item.json.body.data.message.conversation }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4670368c-f448-4c2d-ab89-2365bb77e75b",
      "name": "Set Message from image",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3100,
        480
      ]
    },
    {
      "parameters": {
        "jsCode": "// Obtendo o valor de 'content' do nó 'OpenAI7'\nconst content = $node[\"OpenAI8\"].json[\"content\"];\n\n// Obtendo o valor de 'caption' do nó 'Webhook4'\nconst caption = $node[\"Webhook\"].json[\"body\"][\"data\"][\"message\"][\"imageMessage\"][\"caption\"];\n\n// Concatenar os valores\nconst concatenatedText = content + \" \" + caption;\n\n// Retorna o texto concatenado\nreturn {\n  json: {\n    concatenatedText\n  }\n};"
      },
      "id": "8e66a317-fd61-4705-893c-5eb000033e4f",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2620,
        1380
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99667d07-ff62-4627-9136-64622c85c979",
              "name": "FinalTranscripition",
              "value": "={{ $json.concatenatedText }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "6d731b39-31a6-4f46-be41-b446da711714",
      "name": "Set Message from image4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2460,
        1380
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "66f1b455-0f91-4380-acb3-3d3c515b3513",
              "name": "UrlEvo",
              "value": "={{ $('Webhook').item.json[\"body\"][\"server_url\"] }}",
              "type": "string"
            },
            {
              "id": "cd42d461-5c60-4023-8602-d545009b4d55",
              "name": "Estancia",
              "value": "={{ $('Webhook').item.json[\"body\"][\"instance\"] }}",
              "type": "string"
            },
            {
              "id": "1afba137-5b44-4ad9-9d90-364f7b5eba59",
              "name": "UrlFlowise",
              "value": "https://flowise.trecofantastico.com.br/api/v1/prediction/63f100eb-ca25-4cc7-b011-6d107dfef4f8",
              "type": "string"
            },
            {
              "id": "18339a2f-8a33-489e-9a78-2534d9d194fe",
              "name": "ApiKeyGroq",
              "value": "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",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "368e681d-a65c-4768-acff-da5adfc67a26",
      "name": "Info Base1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3500,
        1080
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fb5f6e40-23b7-46ac-a01b-a538d68b01e7",
              "name": "base64",
              "value": "={{ $('Webhook').item.json[\"body\"][\"data\"][\"message\"][\"base64\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "59571ff8-d96c-4381-9043-27ec9a5861b3",
      "name": "Pega Base",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3360,
        1080
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/audio/transcriptions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=bearer {{ $('Info Base1').item.json[\"ApiKeyGroq\"] }}"
            },
            {
              "name": "Content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-large-v3"
            },
            {
              "name": "temperature",
              "value": "0.7"
            },
            {
              "name": "response_format",
              "value": "json"
            },
            {
              "name": "language",
              "value": "pt"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "mp4"
            }
          ]
        },
        "options": {}
      },
      "id": "d15a7544-0489-45cd-8271-99ec96a2a4cc",
      "name": "GroqTranscreve1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3060,
        1080
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "binaryPropertyName": "mp4",
        "options": {
          "fileName": "data.mp4"
        }
      },
      "id": "b709c53e-2ac4-42ec-9d0c-13c2fedb5429",
      "name": "Convert to File2",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3220,
        1080
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99667d07-ff62-4627-9136-64622c85c979",
              "name": "FinalTranscripition",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "b428d7f2-bf04-44c2-bd47-01a8dca7a0fc",
      "name": "Set Message from Audio1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2920,
        1080
      ]
    },
    {
      "parameters": {
        "amount": 25,
        "path": "4412be7c-4692-4ef1-88c8-cb1aebb808d3"
      },
      "id": "adad3b4c-0d74-47cf-9a97-e2eaa65ba7f0",
      "name": "Wait3",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -980,
        480
      ],
      "webhookId": "4412be7c-4692-4ef1-88c8-cb1aebb808d3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "5aa7e097-878c-43d0-8093-dac1ced274a5",
              "leftValue": "={{ $json.data[0].id }}",
              "rightValue": "={{ $('Cria a mensagem').item.json.id }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "07a9b0b6-300a-4869-aba6-891125fe8254",
      "name": "Verifica se o usuário mandou mais mensagens1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -560,
        480
      ]
    },
    {
      "parameters": {},
      "id": "afce5c1b-94d6-4c58-900c-5f0e8080f57e",
      "name": "Se for mandado o fluxo  é encerrado1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -380,
        660
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "850dce0e-e03b-4bcb-bffd-851bfadd5555",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        -2740,
        760
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "text": "=**Prompt para Descrição Detalhada da Estética Corporal com Base em Instruções de Imagem**\n\n**Instruções Iniciais:**\nAo descrever a imagem, foque exclusivamente na pessoa retratada, ignorando quaisquer elementos de fundo, roupas, ou outros objetos. Primeiramente, utilize qualquer texto fornecido no campo entre parentese {{ $('Webhook').item.json.body.data.message.imageMessage.caption }} para guiar sua descrição. Se o campo estiver vazio, baseie-se apenas nos detalhes visuais observados na imagem.\n\n**Detalhes a serem descritos:**\n\n1. **Pele:**\n   - **Textura:** Descreva se a pele parece suave, áspera, ou mostra irregularidades.\n   - **Cor:** Mencione se a cor da pele é uniforme ou se há presença de manchas, hiperpigmentação.\n   - **Características Notáveis:** Identifique qualquer presença de rugas, linhas de expressão, cicatrizes ou outras marcas notáveis.\n   - **Hidratação e Brilho:** Observe e relate sobre o brilho e a hidratação da pele.\n\n2. **Gordura Abdominal:**\n   - **Distribuição:** Comente sobre a distribuição da gordura na região abdominal, descrevendo se parece proeminente, volumosa ou definida.\n   - **Definição Muscular:** Mencione se há definição muscular visível ou se a mesma está coberta por gordura.\n   - **Retenção de Líquidos:** Relate qualquer sinal observável de retenção de líquidos ou inchaço.\n\n3. **Medidas Corporais:**\n   - **Proporções:** Fale sobre as proporções entre a cintura, quadris e pernas.\n   - **Contorno Corporal:** Descreva o contorno corporal, observando simetria e quaisquer desproporções notáveis.\n\n**Informação Adicional:**\n   - Sua descrição deve ser clara e focada somente na pessoa na imagem, providenciando detalhes visuais pertinentes sem inferir qualidades ou análises.\n\nso descreva a imagem nao retorne nada falando que é uma descrição faça o texto sem qualquer formatação",
        "inputType": "base64",
        "options": {}
      },
      "id": "7f751888-3791-4e3c-bec6-658d61b02445",
      "name": "OpenAI8",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        -2760,
        1380
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "3d2f4231-ee44-482b-8cdc-403fdd9f8cef",
      "name": "listar mensagens2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -740,
        480
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "28f28c66-59a5-470b-8b30-a4bf47735d10",
              "leftValue": "={{ $json.thread_id }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "fd58a9d5-0ce3-4d97-b20d-3ecf9dd2ed32",
      "name": "Possui Thread?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -3720,
        620
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Switch1').item.json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "role",
              "value": "user"
            },
            {
              "name": "content",
              "value": "=# informação do dia atual e os dias da semana.\n\nhoje: {{ $now.setZone('America/Sao_Paulo').toISO() }}: {{ $now.setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(1, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(1, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(2, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(2, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(3, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(3, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(4, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(4, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n\n------------\n#dados do usuário\nNome do usuário: {{ $('Switch1').item.json.user_name }}\nTelefone: {{ $('Switch1').item.json.user_id }}\nMensagem do usuário: {{ $('Merge5').item.json['FinalTranscripition'] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b6d0fc1c-2d04-4f96-a55c-f6575d1ecdd1",
      "name": "Cria a mensagem",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1440,
        500
      ],
      "alwaysOutputData": false,
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "e3669551-c1dd-486e-8b9c-f19e73b50971",
      "name": "listar mensagens3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1240,
        720
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3ad149bc-c41f-46bc-a641-5e96071244eb",
              "name": "base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e390b115-2a78-45d5-8fff-3853927b4e59",
      "name": "Edit Fields2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3060,
        1680
      ]
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "={{ $('Webhook').item.json.body.data.message.documentWithCaptionMessage.message.documentMessage.caption }}",
          "mimeType": "application/pdf"
        }
      },
      "id": "5a84f03a-408b-461d-bde9-90f22cf3a161",
      "name": "Convert to File3",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2920,
        1680
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "4f2250f5-445c-4a5b-a0a9-029eae2ba90d",
      "name": "Extract from File2",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2760,
        1680
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3b76d240-b6ff-44bd-85f1-5be645a1c877",
              "name": "FinalTranscripition",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "44dc46c9-a287-4f78-bdba-8f5b044ae5fc",
      "name": "Edit Fields3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2600,
        1680
      ]
    },
    {
      "parameters": {
        "content": "## Recebe documentos em PDF",
        "height": 254.80860361992686,
        "width": 656.4771385462059,
        "color": 6
      },
      "id": "1b743ed5-aba9-4f51-880d-9bbbb56df762",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        1600
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs/{{ $json.first_id }}/cancel",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "id": "63ad9d16-6ffb-4eeb-b3d6-73cc0a07dc95",
      "name": "cancel run1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1000,
        720
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "id": "19eff98e-80af-4ca0-83bb-ea43948b1de8",
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -3960,
        1540
      ]
    },
    {
      "parameters": {
        "content": "# Vision\n",
        "height": 1537.4290758294974,
        "width": 1017.0377812619341,
        "color": 5
      },
      "id": "f0da505a-0710-49a2-a516-b9967e878407",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3640,
        380
      ]
    },
    {
      "parameters": {
        "content": "# TRANSCRIÇÃO DE AUDIO FEITA PELO GROQ",
        "height": 270.0604285360676,
        "width": 847.097310958336,
        "color": 3
      },
      "id": "da88c080-b1f9-41e7-9b97-a1c861b71e6f",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        980
      ]
    },
    {
      "parameters": {
        "content": "# Buff Memory\n## *Essa seção entende mensagens mandadas separadamente*",
        "height": 554.7811528552347,
        "width": 1096.1823121305529,
        "color": 3
      },
      "id": "a4e6f785-4af5-42b3-bddc-e44c10e058f5",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2180,
        360
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "c5102560-5eab-49c6-aae2-f35a14faa22d",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagem"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d7de1770-ed8b-4ad4-8eb2-269d2418b467",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "=conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7aced410-0f1a-46bd-8394-2c19f0edaece",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "documentWithCaptionMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            }
          ]
        },
        "options": {}
      },
      "id": "f17daa31-18ed-45af-9054-bb87568f1e95",
      "name": "O que devo transcrever",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        -3960,
        1720
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "id": "c27460b0-1c0a-4c92-a531-72379e3d182d",
      "name": "Merge - user",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -3940,
        620
      ]
    },
    {
      "parameters": {},
      "id": "ea5896e5-936c-4331-a0bd-ded010b22279",
      "name": "Merge5",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1960,
        500
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "/extendedTextMessage|conversation/",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "26e40a8a-8cc6-49af-9c5e-5ace09818a2a",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "/audioMessage/",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "4eeabdb7-9be5-406a-a1fc-89972bc0cf4a",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "/imageMessage/",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2445ba93-a8d9-4f95-82dc-e49e266f421a",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "/documentWithCaptionMessage/",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "pdf"
            }
          ]
        },
        "options": {}
      },
      "id": "ca6c0e0f-cd54-4e5f-a981-6dfc12dc582f",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        -3420,
        580
      ]
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Merge - user').item.json.thread_id }}/messages?order=desc",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "788be9a0-3082-4355-9fbe-760df5dfcb9d",
      "name": "Pega a ultima mensagem",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1400,
        1840
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "5e5cd14f-8a92-44b1-9ace-9170d3de9a23",
      "name": "Extract from File3",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2600,
        1500
      ],
      "disabled": true
    },
    {
      "parameters": {
        "resource": "audio",
        "input": "={{ $json.data[0].content[0].text.value }}",
        "voice": "nova",
        "options": {}
      },
      "id": "a4f1949d-1ef8-4496-8ad2-19b18984bb71",
      "name": "Envia resposta em Audio1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.5,
      "position": [
        2220,
        1500
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Mensagem Final para o usuário\n### \n",
        "height": 1609,
        "width": 1767,
        "color": 4
      },
      "id": "33c692c4-9c52-4933-815c-ec12cc492669",
      "name": "Sticky Note20",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        620,
        1460
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Você vai receber mensagens grandes do usuário. Seu trabalho é separá-las de acordo com o JSON Schema. Não invente ou altere a mensagem original de forma alguma. Cada chunk será enviado para o usuário, então tenha certeza de que não serão vários chunks, limite-se a 2 ou 3 frases por parágrafo. REGRAS: - Manter listas juntas, com seu respectivo título - Faça com que os parágrafos sejam longos o suficiente para não enviar várias mensagens para o usuário.\"\n    },\n    {\n      \"role\": \"user\"\n      \"content\": \"{{ $json.data[0].content[0].text.value }}\"\n    }\n  ],\n  \"response_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"name\": \"message_chunks\",\n      \"strict\": true,\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"chunks\": {\n            \"type\": \"array\",\n            \"description\": \"An array of message chunks, where each chunk is a separate paragraph.\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"paragraph\": {\n                  \"type\": \"string\",\n                  \"description\": \"A coherent paragraph extracted from the large message.\"\n                },\n                \"sequence_number\": {\n                  \"type\": \"number\",\n                  \"description\": \"The order of this chunk in the original message.\"\n                }\n              },\n              \"required\": [\"paragraph\", \"sequence_number\"],\n              \"additionalProperties\": false\n            }\n          }\n        },\n        \"required\": [\"chunks\"],\n        \"additionalProperties\": false\n      }\n    }\n  }\n}",
        "options": {}
      },
      "id": "4d1f0817-06ac-4f32-8165-306de147652f",
      "name": "Chat Completion - Formatter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1000,
        2960
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d6e36e29-97f2-4375-9b90-a5e83d3e3225",
              "name": "messages",
              "value": "={{ $json.choices[0].message.content }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "1b73c600-9b65-4007-8b46-bfc0db75c4be",
      "name": "Separa Chunks",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1160,
        2960
      ]
    },
    {
      "parameters": {
        "amount": 1,
        "path": "eb91c101-0320-4da7-affe-61e9453112aa"
      },
      "id": "0abe0451-6cc7-450c-851a-919c03c348b8",
      "name": "Buffer",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2760,
        2920
      ],
      "webhookId": "eb91c101-0320-4da7-affe-61e9453112aa"
    },
    {
      "parameters": {},
      "id": "27e21085-9cce-4ded-b895-adfeb5a4edc9",
      "name": "Fim",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2660,
        2620
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "messages.chunks",
        "options": {}
      },
      "id": "87c976c7-3cdf-4138-a3db-162b3fb7462c",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1300,
        2960
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "2b2f2f86-7158-4afa-852a-c4d6dbfdc517",
      "name": "Loop Over Items5",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2200,
        2700
      ]
    },
    {
      "parameters": {
        "content": "## Envia Mensagem + Tratamento\nEnvia mensagens curtas e trata mensagens longas",
        "height": 388.7538544254027,
        "width": 1243.0339165003102,
        "color": 7
      },
      "id": "a5d14482-d2c0-4b59-ac1a-e8563b00ad17",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        940,
        2600
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "required_action.submit_tool_outputs.tool_calls",
        "options": {}
      },
      "id": "484509bb-a24d-4c1c-8b74-b5ef97138269",
      "name": "Split Out2",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1160,
        -660
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": "={{ $('Loop Over Items3').context[\"done\"] }}"
        }
      },
      "id": "87212299-4834-4bb3-a80a-d193e2d6a784",
      "name": "Loop Over Items3",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1380,
        -660
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6b39511f-c389-468a-916e-9d2d0a286f11",
              "name": "arguments",
              "value": "={{ $json.function.arguments }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "47e57cae-5f91-42dc-980c-d68a04ce737d",
      "name": "separa argumentos1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1600,
        -520
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5e65cdf4-ec47-468a-8f7b-d1492d6ced4a",
                    "leftValue": "={{ $('Loop Over Items3').item.json.function.name }}",
                    "rightValue": "verifica_agendamentos",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "verifica_agendamentos"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "07d9a1c1-fa50-4a47-88ff-3b1e19472e66",
                    "leftValue": "={{ $('Loop Over Items3').item.json.function.name }}",
                    "rightValue": "agendar_reuniao",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "agendar_reunião"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2896c149-9318-4c42-afa1-4d469b05e0ff",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "reagendar_evento",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=reagendar_evento"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "69f49263-210b-4144-8b9d-873ca275fe5a",
                    "leftValue": "={{ $('Loop Over Items3').item.json.function.name }}",
                    "rightValue": "excluir_agendamento",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "excluir_agendamento"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f6992fb5-bfcd-47f1-9e0a-c73515258d1c",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "get_user_data",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get_user_data"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "enviar_notificacao_atendimento",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "07f5d75e-6c33-4003-83fd-d28e82d4464f"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "enviar_notificacao_atendimento"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "52ad1d15-9d3f-4f71-aa82-af532466af3a",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "save_user_data",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "save_user_data"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ab89c9e9-21b4-44be-9643-d6f39da85b08",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "verifica_agendamento_usuario",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "verifica_agendamento_usuario"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "93153aa5-efed-49c5-893c-f29b27779154",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "encerrar_conversa",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "encerrar_conversa"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d01b3011-07d3-4a7b-b3f0-f36399a61e0e",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "get_procedimento_info",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get_procedimento_info"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1d6a84a1-d815-460e-8ac7-1eb10e12f97f",
                    "leftValue": "={{ $('Split Out2').item.json.function.name }}",
                    "rightValue": "conversar_com_humano",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "conversar_com_humano"
            }
          ]
        },
        "options": {}
      },
      "id": "a67dd54b-ed47-4a80-b1ed-4df8c8dd915b",
      "name": "Escolhe Função1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1800,
        -520
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "155eb1f0-0ba5-4a9e-97ff-af2b0a8122e6",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "requires_action",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "requires_action"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "queued",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "queued"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f5e53bc7-5a5f-4255-a8a0-974bb330bd19",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "in_progress",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "in_progress"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d4c5de3b-7709-49cb-8690-2e11698dcc21",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "cancelling",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "cancelling"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "e14cf09b-fcd7-407d-98d6-cb0e7a42e1e7",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "cancelled",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "cancelled"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "9d6e149b-372d-406b-9084-efb2a8777d0f",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "failed",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "failed"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "25ea1e18-c8cb-4c5f-811f-a1e9c7155985",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "completed",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "completed"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "17b401d4-54f0-4686-8c75-1b3cb6db007d",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "incomplete",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "incomplete"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "a17c6659-6997-49da-bad2-7e0583251559",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "expired",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "expired"
            }
          ]
        },
        "options": {}
      },
      "id": "6958d6fe-2c3c-4708-851f-ba93ea9b6eb9",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        160,
        400
      ]
    },
    {
      "parameters": {
        "amount": 3,
        "path": "f15d6f4b-abe2-495e-b3dc-99fa9c72975c"
      },
      "id": "4556a186-7b68-4efe-ae7b-4f7f59560d4b",
      "name": "Wait2",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        480,
        520
      ],
      "webhookId": "f15d6f4b-abe2-495e-b3dc-99fa9c72975c"
    },
    {
      "parameters": {
        "content": "## Parte que conversa com a inteligencia artificial ",
        "height": 585,
        "width": 883
      },
      "id": "0e28f8c0-33b5-4e61-8acf-4d7d8c7e5c4f",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -880,
        320
      ]
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Merge - user').first().json.thread_id }}/runs/{{ $('Switch').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "id": "30fc4211-6701-4033-bd5b-1dfbc9256083",
      "name": "Get Run Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        680
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Merge - user').first().json.thread_id }}/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "assistant_id",
              "value": "asst_DSNuWrewEP9RPrXcAWQCvnBR"
            }
          ]
        },
        "options": {}
      },
      "id": "b558f7cb-6493-4cbd-ba43-7c6df4d8df27",
      "name": "Executa uma Run - Aqui está o assistant",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        940,
        -1280
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418669,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3211226,
                "operator": "contains",
                "value": "={{ $json.arguments.category }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3720,
        -100
      ],
      "id": "7bcd5b24-71d3-4614-8050-a1997d80eb91",
      "name": "Baserow1",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": \"name: {{ $json.Name }}, category: {{ $json.Category.value }}, author: {{ $json.author }}, price: {{ $json.price }}, media_url: {{ $json.URL }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3940,
        -100
      ],
      "id": "59a5d05f-a4f4-4c03-b09b-eda2d2ab7fa2",
      "name": "Prepara outpoot"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "output"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        6500,
        -400
      ],
      "id": "f254e6d8-77ea-4d46-a549-09f5d128d4f1",
      "name": "Summarize"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"tool_call_id\": \"{{ $('Split Out2').item.json.id }}\",\n  \"output\": \"{{ $json.concatenated_output }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6200,
        660
      ],
      "id": "e1905185-c697-4aea-903a-609ea3731dc1",
      "name": "Set tool call id"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1600,
        -760
      ],
      "id": "137765bb-9cdc-4f06-a660-54409a37fb9d",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Get Run Status').item.json.thread_id }}/runs/{{ $('Get Run Status').item.json.id }}/submit_tool_outputs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"tool_outputs\": {{ $json.output }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1940,
        -1040
      ],
      "id": "af9dd4ec-6f2f-4852-a302-e89d2e5b1507",
      "name": "HTTP Request",
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1e729de8-85e8-48ed-a102-dff33c603ee8",
              "name": "output",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1760,
        -1040
      ],
      "id": "fca13591-53ed-4d10-bfe6-d7ce2c1e0e2f",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $('Baserow - Get User').first().json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3214404,
              "fieldValue": "={{ $json.arguments.endereco }}"
            },
            {
              "fieldId": 3884594,
              "fieldValue": "={{ $json.arguments.email }}"
            },
            {
              "fieldId": 3210936,
              "fieldValue": "={{ $json.arguments.nome }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        4380,
        500
      ],
      "id": "9bfd4f5c-d5fa-4113-9f16-46a1563b0b6c",
      "name": "Baserow3",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": \"name: {{ $json.user_name }}, whatsapp: {{ $json.user_id }}, address:{{ $json.address }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4600,
        500
      ],
      "id": "cc7a28e5-9ef1-4f7b-9a5c-ba1b4dc94b64",
      "name": "Prepara outpoot1"
    },
    {
      "parameters": {
        "operation": "get",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $('Baserow - Get User').first().json.id }}"
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        4380,
        300
      ],
      "id": "2e546156-9b65-4b1b-ac26-55bf9ab3b9e1",
      "name": "Baserow4",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": \"name: {{ $json.user_name }}, whatsapp: {{ $json.user_id }}, address:{{ $json.address }}, id:{{ $json.id }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4600,
        300
      ],
      "id": "57204691-32ea-49e7-8c0a-4489ce58a475",
      "name": "Prepara outpoot2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c04ec9b2-70be-4603-9d45-c62c69f32d24",
                    "leftValue": "={{ $json.data[0].content[0].text.value.extractUrl() }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Product"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2cbe22b8-2506-4a9a-9194-c0c5657b9590",
                    "leftValue": "={{ $json.data[0].content[0].text.value.extractUrl() }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1840,
        1840
      ],
      "id": "dbc287ee-2a9b-4c05-9651-a118918dd69a",
      "name": "Switch3",
      "disabled": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "itens",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2560,
        1900
      ],
      "id": "84abef6d-64cc-4ee0-ba8a-e7b13ea43c81",
      "name": "Split Out3"
    },
    {
      "parameters": {
        "amount": 1,
        "path": "3f666649-6aa9-4e80-8911-c43cc91bf7c4"
      },
      "id": "4f9fc0a0-ea72-4e1a-9a31-83aed85edf69",
      "name": "Buffer1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3300,
        2000
      ],
      "webhookId": "3f666649-6aa9-4e80-8911-c43cc91bf7c4"
    },
    {
      "parameters": {},
      "id": "7125aa88-36b9-47a8-ada4-73d91c648dfe",
      "name": "Fim1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3120,
        1820
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "6a18c09c-b1b9-40de-b384-d1aa788c37e6",
      "name": "Loop Over Items6",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2800,
        1900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Captura o texto bruto da última mensagem\nconst rawData = $('Pega a ultima mensagem').first().json?.data?.[0]?.content?.[0]?.text?.value || \"\";\n\n// Regex para capturar os itens e rodapé\nconst itemRegex = /(\\*\\*(.*?)\\*\\*)[\\s\\S]*?Autor: (.*?)\\n.*?Preço: R\\$(.*?)\\n.*?\\!\\[.*?\\]\\((.*?)\\)/g;\nconst footerRegex = /\\n\\n(Se você se interessar.*?)$/; // Captura mensagem final\nconst headerRegex = /^(.*?):\\n\\n/; // Captura mensagem inicial\n\n// Inicializar variáveis\nconst mensagemInicial = rawData.match(headerRegex)?.[1]?.trim() || \"\";\nconst mensagemFinal = rawData.match(footerRegex)?.[1]?.trim() || \"\";\nconst itens = [];\nlet match;\n\n// Loop pelos itens encontrados\nwhile ((match = itemRegex.exec(rawData)) !== null) {\n  itens.push({\n    produto: `**${match[2]}**\\nAutor: ${match[3]}\\nPreço: R${match[4]}`,\n    url: match[5]\n  });\n}\n\n// Concatena mensagem inicial e final no primeiro produto\nif (itens.length > 0) {\n  itens[0].produto = `${mensagemInicial}\\n\\n${mensagemFinal}\\n\\n${itens[0].produto}`;\n}\n\n// Resultado final\nconst resultado = {\n  itens\n};\n\n// Retornar o resultado\nreturn resultado;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2180,
        1900
      ],
      "id": "cf2edcc3-132a-4eee-92ce-97e64e275eb8",
      "name": "Code"
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418625,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3210935,
                "value": "={{ $json.body.data.key.remoteJid.split('@') [0]  }}"
              }
            ]
          },
          "filterType": "OR"
        }
      },
      "id": "6b616f87-73df-4e40-94be-ec8e96f5e4aa",
      "name": "Baserow - Get User",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -5020,
        620
      ],
      "alwaysOutputData": true,
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "instanceName": "pixeomkt",
        "options_Create_instance": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        3080,
        2000
      ],
      "id": "f6d48692-a3f6-4566-bc9c-f735c40b7174",
      "name": "Evolution API1",
      "credentials": {
        "evolutionApi": {
          "id": "9cBJRHiC9OlAfm34",
          "name": "wsapi.aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "aimaze",
        "remoteJid": "={{ $('Possui Thread?').item.json.user_id }}",
        "messageText": "={{ $json.chunks }}",
        "options_message": {
          "delay": "={{ $json.delay }}"
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2460,
        2760
      ],
      "id": "b880344c-6239-4ac6-a6a0-375e76504a97",
      "name": "Evolution API",
      "credentials": {
        "evolutionApi": {
          "id": "TgOTPEmUw6n2wmlf",
          "name": "Evolution Clindermy"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": \"name: {{ $json.user_name }}, whatsapp: {{ $json.user_id }}, address:{{ $json.address }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2340,
        2360
      ],
      "id": "d0021fad-ee72-4c47-bdb6-9f0cbf96be34",
      "name": "Prepara outpoot3"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "start": "={{ $('Escolhe Função1').item.json.arguments.data_inicio }}",
        "end": "={{ $('Escolhe Função1').item.json.arguments.data_fim }}",
        "additionalFields": {
          "description": "={{ $('separa argumentos1').item.json.arguments.descricao }}",
          "summary": "={{ $('separa argumentos1').item.json.arguments.assunto }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3340,
        -1140
      ],
      "id": "f72c1148-2ca1-4024-ae2c-a7609b0e53a2",
      "name": "Google Calendar3",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3600,
        -1140
      ],
      "id": "5133bc72-d910-4f68-84a5-5362eaad2d07",
      "name": "Separa dados calendar"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3820,
        -1140
      ],
      "id": "bee8eb09-fed4-4979-866d-7800b96df835",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"agendado: {{ $json.evento }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4280,
        -1140
      ],
      "id": "105a5c73-80eb-47c3-935f-e02174771921",
      "name": "output"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "en.brazilian#holiday@group.v.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Holidays in Brazil"
        },
        "returnAll": true,
        "timeMin": "={{ $json.arguments.inicio }}",
        "timeMax": "={{ $json.arguments.fim }}",
        "options": {
          "timeZone": {
            "__rl": true,
            "value": "America/Sao_Paulo",
            "mode": "list",
            "cachedResultName": "America/Sao_Paulo"
          }
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3440,
        -1780
      ],
      "id": "b3d49e34-3587-44fc-b185-5cf8b96a34c4",
      "name": "Google Calendar4",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "evento"
            }
          ]
        },
        "options": {
          "outputFormat": "singleItem"
        }
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        7920,
        -3080
      ],
      "id": "aab0fecd-f564-4835-b5ac-6f1b75b8e8ef",
      "name": "Summarize1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"horarios_disponiveis_no_dia: {{ $json.horarios_disponiveis }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        8580,
        -3080
      ],
      "id": "9ed6b9b1-55c1-43d2-8d91-4c9a81bf6b28",
      "name": "output1"
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "eventId": "={{ $json.arguments.event_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        4380,
        100
      ],
      "id": "d8ed2e33-b7e4-484c-b335-7b1da96c2123",
      "name": "Google Calendar5",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"excluir_agendamento:{{ $json.success }}, o agendamento foi excluido com sucesso.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4600,
        100
      ],
      "id": "b475ce61-3b0f-4381-919d-f59a2b2ff44a",
      "name": "output2"
    },
    {
      "parameters": {
        "content": "# Agendar reunião\n{\n  \"name\": \"agendar_reuniao\",\n  \"description\": \"Agenda uma reunião definindo data de início, data de fim (uma hora depois da data de início), assunto e descrição\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"data_inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data de início da reunião no formato ISO 8601, por exemplo, 2025-09-19T00:00:00\"\n      },\n      \"data_fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data de fim da reunião no mesmo formato, que deve ser uma hora após a data de início\"\n      },\n      \"assunto\": {\n        \"type\": \"string\",\n        \"description\": \"Assunto da reunião\"\n      },\n      \"descricao\": {\n        \"type\": \"string\",\n        \"description\": \"Descrição da reunião\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"data_inicio\",\n      \"data_fim\",\n      \"assunto\",\n      \"descricao\"\n    ]\n  }\n}",
        "height": 240,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5460,
        1640
      ],
      "id": "ac6c0831-f4ff-4836-9b85-8d5b6dacba88",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# verifica horários\n{\n  \"name\": \"verifica_agendamentos\",\n  \"description\": \"Verifica os agendamentos existentes no intervalo diário (00:00 às 23:59) e filtra somente os que ocorrem dentro do horário comercial (07:00 às 19:00, com o último horário de marcação às 18:00), retornando os horários livres em blocos de 1h.\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de início do intervalo para verificação, no formato ISO 8601 (ex: 2025-09-19T00:00:00)\"\n      },\n      \"fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de fim do intervalo para verificação, no mesmo formato (ex: 2025-09-19T23:59:00)\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"inicio\",\n      \"fim\"\n    ]\n  }\n}\n\n\n## versão final\n\n{\n  \"name\": \"verifica_agendamentos\",\n  \"description\": \"Verifica os agendamentos existentes no intervalo diário (00:00 às 23:59) e filtra somente os que ocorrem dentro do horário comercial (07:00 às 19:00, com o último horário de marcação às 18:00), retornando os horários livres em blocos de 1h.\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de início do intervalo para verificação, no formato ISO 8601 (ex: 2025-09-19T00:00:00)\"\n      },\n      \"fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de fim do intervalo para verificação, no mesmo formato (ex: 2025-09-19T23:59:00)\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"inicio\",\n      \"fim\"\n    ]\n  }\n}",
        "height": 740,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -6020,
        560
      ],
      "id": "0e0155ea-d8af-456a-91c7-4bf585392dd8",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# delete\n{\n  \"name\": \"excluir_agendamet\",\n  \"description\": \"Exclui um agendamento com base no Event ID fornecido\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"event_id\": {\n        \"type\": \"string\",\n        \"description\": \"Identificador do evento a ser excluído\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"event_id\"\n    ]\n  }\n}",
        "height": 240,
        "width": 280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5760,
        1380
      ],
      "id": "5e5f26ca-16de-4756-bcfc-e3f2737dc286",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsCode": "// ============ parâmetros “fáceis de mexer” =============\nconst inicioExpediente = 8;   // 08:00\nconst fimExpediente    = 19;  // 19:00  (o último slot será 18:30‑19:00)\nconst passoMinutos     = 30;  // tamanho do slot\n// =======================================================\n\n// 1. Entrada -------------------------------------------------------------\nconst entrada = $json.concatenated_evento ?? '';\n\n/* Entrada esperada (exemplo):\n   data_comeco: 2025-04-17T15:00:00-03:00, data_fim: 2025-04-17T16:00:00-03:00.,\n   data_comeco: 2025-04-17T17:00:00-03:00, data_fim: 2025-04-17T17:30:00-03:00.\n*/\n\n// 2. Extrai períodos ocupados -------------------------------------------\nconst busyRegex = /data_comeco:\\s*([\\d\\-T:+]+),\\s*data_fim:\\s*([\\d\\-T:+]+)\\.?/g;\nconst ocupados = []; // {iniMin, fimMin}\nlet m;\nwhile ((m = busyRegex.exec(entrada)) !== null) {\n  ocupados.push({\n    iniMin: isoToMinutes(m[1]),\n    fimMin: isoToMinutes(m[2]),\n  });\n}\n\n// 3. Gera slots disponíveis ---------------------------------------------\nconst disponiveis = [];\nfor (let iniMin = inicioExpediente * 60;\n     iniMin < fimExpediente * 60;\n     iniMin += passoMinutos) {\n\n  const fimMin = iniMin + passoMinutos;\n\n  // colisão?  (slotStart < busyEnd) && (slotEnd > busyStart)\n  const colide = ocupados.some(({iniMin: bIni, fimMin: bFim}) =>\n                                iniMin < bFim && fimMin > bIni);\n  if (colide) continue;\n\n  disponiveis.push(`${formatHHMM(iniMin)}-${formatHHMM(fimMin)}`);\n}\n\n// 4. Retorno -------------------------------------------------------------\nreturn [\n  {\n    json: {\n      horarios_disponiveis: disponiveis.join(', ')\n    }\n  }\n];\n\n// ============ utilitários ==============================================\nfunction isoToMinutes(iso) {\n  // “2025‑04‑17T15:00:00‑03:00” → 15*60 + 0\n  const timePart = iso.split('T')[1];      // 15:00:00‑03:00\n  const [hh, mm] = timePart.split(':');\n  return Number(hh) * 60 + Number(mm);\n}\n\nfunction formatHHMM(minutos) {\n  const hh = String(Math.floor(minutos / 60)).padStart(2, '0');\n  const mm = String(minutos % 60).padStart(2, '0');\n  return `${hh}:${mm}`;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        8360,
        -3080
      ],
      "id": "dc9cbb8e-e729-4a83-98b9-ec5cfbcdc5fa",
      "name": "Code2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        7480,
        -3080
      ],
      "id": "d08e1281-c480-4d6f-b618-98be08315016",
      "name": "Separa dados calendar2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        7700,
        -3080
      ],
      "id": "345e7ad3-1be1-4824-892b-3e07e33db0f6",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "content": "## Node-code separa horários disponíveis do calendário bloco de uma hora\n\n// Obtém a string dos eventos concatenados do input\nconst inputData = $json.concatenated_evento;\n\n// A data desejada pode vir do input ou assumir um padrão (ex.: \"2025-04-04\")\nconst diaDesejado = $json.date || \"2025-04-04\";\n\n// Regex para extrair os dados de cada agendamento\nconst regex = /id:\\s*([^,]+),\\s*data_comeco:\\s*([^,]+),\\s*data_fim:\\s*([^.]+)\\.\\s*Titulo:\\s*([^.,]+)/g;\n\n// Conjunto para armazenar os horários ocupados\nconst horariosOcupados = new Set();\nlet match;\n\nwhile ((match = regex.exec(inputData)) !== null) {\n  const dataComeco = match[2].trim();\n  // Considera somente os agendamentos que iniciam na data desejada\n  if (dataComeco.startsWith(diaDesejado)) {\n    // Extrai a parte do horário de início\n    const timePartInicio = dataComeco.split(\"T\")[1];\n    const horaInicio = parseInt(timePartInicio.substring(0, 2));    \n    const minutosInicio = parseInt(timePartInicio.substring(3, 5));   \n    // Se os minutos forem >= 30, bloqueia o próximo horário; senão, bloqueia o horário atual\n    const slotInicio = minutosInicio >= 30 ? horaInicio + 1 : horaInicio;\n    \n    // Extrai a parte do horário de término\n    const dataFim = match[3].trim();\n    const timePartFim = dataFim.split(\"T\")[1];\n    const horaFim = parseInt(timePartFim.substring(0, 2));    \n    const minutosFim = parseInt(timePartFim.substring(3, 5));   \n    const slotFim = minutosFim >= 30 ? horaFim + 1 : horaFim;\n    \n    // Bloqueia todos os horários entre o início e o término (não incluindo o horário de término)\n    for (let hora = slotInicio; hora < slotFim; hora++) {\n      horariosOcupados.add(hora);\n    }\n  }\n}\n\n// Gera os intervalos disponíveis entre 07:00 e 19:00, removendo os horários ocupados\nconst horarioDisponivel = [];\nfor (let hora = 7; hora < 19; hora++) {\n  if (!horariosOcupados.has(hora)) {\n    // Formata para ter dois dígitos, se necessário\n    const start = hora < 10 ? \"0\" + hora : hora;\n    const end = (hora + 1) < 10 ? \"0\" + (hora + 1) : (hora + 1);\n    horarioDisponivel.push(`${start}:00-${end}:00`);\n  }\n}\n\n// Cria a string final conforme desejado\nconst resultText = \"horarioDisponivel: \" + horarioDisponivel.join(\", \");\n\n// Retorna como array de objetos (JSON válido)\nreturn [{ horarioDisponivel: resultText }];",
        "height": 240,
        "width": 300,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5460,
        1120
      ],
      "id": "d8e5c2c6-a863-4f91-aa0a-a42d2bdb6362",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Node-code separa horários disponíveis do calendário bloco de meia hora\n\n// Obtém a string dos eventos concatenados do input\nconst inputData = $json.concatenated_evento;\n\n// A data desejada pode vir do input ou assumir um padrão (ex.: \"2025-04-04\")\nconst diaDesejado = $json.date || \"2025-04-04\";\n\n// Regex para extrair os dados de cada agendamento\nconst regex = /id:\\s*([^,]+),\\s*data_comeco:\\s*([^,]+),\\s*data_fim:\\s*([^.]+)\\.\\s*Titulo:\\s*([^.,]+)/g;\n\n// Conjunto para armazenar os horários ocupados\nconst horariosOcupados = new Set();\nlet match;\n\nwhile ((match = regex.exec(inputData)) !== null) {\n  const dataComeco = match[2].trim();\n  // Considera somente os agendamentos que iniciam na data desejada\n  if (dataComeco.startsWith(diaDesejado)) {\n    // Processa a parte de início do evento\n    const timePartInicio = dataComeco.split(\"T\")[1];\n    const horaInicio = parseInt(timePartInicio.substring(0, 2));    \n    const minutosInicio = parseInt(timePartInicio.substring(3, 5));   \n    // Converte para slot de 30 minutos (cada hora possui 2 slots)\n    const slotInicio = horaInicio * 2 + (minutosInicio >= 30 ? 1 : 0);\n    \n    // Processa a parte de término do evento\n    const dataFim = match[3].trim();\n    const timePartFim = dataFim.split(\"T\")[1];\n    const horaFim = parseInt(timePartFim.substring(0, 2));    \n    const minutosFim = parseInt(timePartFim.substring(3, 5));   \n    const slotFim = horaFim * 2 + (minutosFim >= 30 ? 1 : 0);\n    \n    // Bloqueia todos os slots de 30 minutos entre o início e o término (slotFim não incluso)\n    for (let slot = slotInicio; slot < slotFim; slot++) {\n      horariosOcupados.add(slot);\n    }\n  }\n}\n\n// Gera os intervalos disponíveis entre 07:00 e 19:00, em blocos de 30 minutos\nconst horarioDisponivel = [];\n// Cada slot representa 30 minutos; de 07:00 (7*2 = 14) até 19:00 (19*2 = 38, não incluso)\nfor (let slot = 7 * 2; slot < 19 * 2; slot++) {\n  if (!horariosOcupados.has(slot)) {\n    const startHour = Math.floor(slot / 2);\n    const startMin = (slot % 2 === 0) ? \"00\" : \"30\";\n    const endSlot = slot + 1;\n    const endHour = Math.floor(endSlot / 2);\n    const endMin = (endSlot % 2 === 0) ? \"00\" : \"30\";\n    // Formata para ter dois dígitos, se necessário\n    const startStr = (startHour < 10 ? \"0\" + startHour : startHour) + \":\" + startMin;\n    const endStr = (endHour < 10 ? \"0\" + endHour : endHour) + \":\" + endMin;\n    horarioDisponivel.push(`${startStr}-${endStr}`);\n  }\n}\n\n// Cria a string final conforme desejado\nconst resultText = \"horarioDisponivel: \" + horarioDisponivel.join(\", \");\n\n// Retorna como array de objetos (JSON válido)\nreturn [{ horarioDisponivel: resultText }];",
        "height": 240,
        "width": 280,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5760,
        1120
      ],
      "id": "42f035d1-651c-4a6d-b131-771bace825be",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# Reagendar Reunião\n{\n  \"name\": \"reagendar_evento\",\n  \"description\": \"Reagenda o evento com nova data de início e fim, juntamente com assunto e descrição. Essa função é chamada quando o usuário informar que não poderá comparecer, cancelar ou pedir para reagendar o evento.\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"data_inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Nova data de início do evento no formato ISO 8601, por exemplo, 2025-09-19T00:00:00\"\n      },\n      \"data_fim\": {\n        \"type\": \"string\",\n        \"description\": \"Nova data de fim do evento no mesmo formato, que representa o término do evento\"\n      },\n      \"assunto\": {\n        \"type\": \"string\",\n        \"description\": \"Assunto do evento\"\n      },\n      \"descricao\": {\n        \"type\": \"string\",\n        \"description\": \"Descrição detalhada do evento\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"data_inicio\",\n      \"data_fim\",\n      \"assunto\",\n      \"descricao\"\n    ]\n  }\n}",
        "height": 240,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5140,
        1120
      ],
      "id": "647cdad0-60a2-47b3-b261-50c36bddc566",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3880,
        -580
      ],
      "id": "5e541657-40f0-4091-a24f-29b84633fee8",
      "name": "Separa dados calendar4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4320,
        -580
      ],
      "id": "691a607b-e801-446b-8b32-c36a897a309c",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"reagendado: O seu evento foi reagendado com sucesso {{ $json.evento }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4540,
        -580
      ],
      "id": "9622e3b1-b53c-4a3c-9f42-67b348c19dd7",
      "name": "output4"
    },
    {
      "parameters": {
        "content": "# verifica horários v02\n{\n  \"name\": \"verifica_agendamentos\",\n  \"description\": \"Verifica os agendamentos existentes no intervalo diário (00:00 às 23:59) e filtra somente os que ocorrem dentro do horário comercial (07:00 às 19:00, com o último horário de marcação às 18:00), retornando os horários livres em blocos de 1h.\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de início do intervalo para verificação, no formato ISO 8601 (ex: 2025-09-19T00:00:00)\"\n      },\n      \"fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data e hora de fim do intervalo para verificação, no mesmo formato (ex: 2025-09-19T23:59:00)\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"inicio\",\n      \"fim\"\n    ]\n  }\n}",
        "height": 840,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5140,
        1640
      ],
      "id": "1c9daf8f-2167-4581-af8c-d29114d80f01",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "# Agendar reunião v02\n{\n  \"name\": \"agendar_reuniao\",\n  \"description\": \"Agenda uma reunião definindo data de início, data de fim (uma hora depois da data de início), assunto e descrição\",\n  \"strict\": true,\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"data_inicio\": {\n        \"type\": \"string\",\n        \"description\": \"Data de início da reunião no formato ISO 8601, por exemplo, 2025-09-19T00:00:00\"\n      },\n      \"data_fim\": {\n        \"type\": \"string\",\n        \"description\": \"Data de fim da reunião no mesmo formato, que deve ser uma hora após a data de início\"\n      },\n      \"assunto\": {\n        \"type\": \"string\",\n        \"description\": \"Assunto da reunião, no formato: Nome do procedimento <> Nome do cliente\"\n      },\n      \"descricao\": {\n        \"type\": \"string\",\n        \"description\": \"Descrição da reunião com os dados de contato (email e telefone)\"\n      }\n    },\n    \"additionalProperties\": false,\n    \"required\": [\n      \"data_inicio\",\n      \"data_fim\",\n      \"assunto\",\n      \"descricao\"\n    ]\n  }\n}",
        "height": 240,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5140,
        1380
      ],
      "id": "0771f668-b0bb-4e28-8165-3805aaeb1072",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ff416a00-7729-4ef9-accb-b04329f96ca9",
              "leftValue": "={{ $json.available }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3440,
        -480
      ],
      "id": "727d9573-faee-4f4b-a807-2d61a7e9e382",
      "name": "If2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"reagendamento: esse horário não está disponível,Fale que acabou de conferir e viu que nao estava disponível\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3660,
        -320
      ],
      "id": "506baad6-a698-4969-aab7-cf18da3a2ddc",
      "name": "output5"
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "eventId": "={{ $('Escolhe Função1').item.json.arguments.eventID }}",
        "updateFields": {
          "end": "={{ $('Escolhe Função1').item.json.arguments.data_fim }}",
          "start": "={{ $('Escolhe Função1').item.json.arguments.data_inicio }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3660,
        -580
      ],
      "id": "c62fde56-8de6-4506-ae15-cb4d1dfba2c9",
      "name": "Google Calendar10",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "timeMin": "={{ $json.arguments.data_inicio }}",
        "timeMax": "={{ $json.arguments.data_fim }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3220,
        -480
      ],
      "id": "1b59b398-abfd-4394-b5b0-fb0772affffa",
      "name": "verifica_evento_individual",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "content": "# Agendar reunião v03\n// Obtém a string dos eventos concatenados do input\nconst inputData = $json.concatenated_evento;\n// Define o dia desejado (pode vir do input, se não utiliza o padrão \"2025-04-15\")\nconst diaDesejado = $json.date || \"2025-04-15\";\n\n// Regex para extrair os dados de cada agendamento\nconst regex = /id:\\s*([^,]+),\\s*data_comeco:\\s*([^,]+),\\s*data_fim:\\s*([^.]+)\\.\\s*Titulo:\\s*([^.,]+)/g;\nconst eventos = [];\nlet match;\n\n// Para cada evento encontrado, extrai diretamente os valores de hora e minuto a partir da string\nwhile ((match = regex.exec(inputData)) !== null) {\n  const dataComecoStr = match[2].trim();\n  const dataFimStr = match[3].trim();\n  \n  // Considera somente os agendamentos do dia desejado, conforme a string de data\n  if (dataComecoStr.startsWith(diaDesejado)) {\n    // Extrai a parte do horário (HH:MM) da string\n    // Exemplo: \"2025-04-15T16:00:00-03:00\" -> pega \"16:00\"\n    const timePartInicio = dataComecoStr.split(\"T\")[1].substring(0, 5);\n    const timePartFim = dataFimStr.split(\"T\")[1].substring(0, 5);\n    \n    // Separa hora e minutos e converte para número\n    const [horaInicio, minutoInicio] = timePartInicio.split(\":\").map(Number);\n    const [horaFim, minutoFim] = timePartFim.split(\":\").map(Number);\n    \n    // Converte para total de minutos desde a meia-noite\n    const totalInicio = horaInicio * 60 + minutoInicio;\n    const totalFim = horaFim * 60 + minutoFim;\n    \n    eventos.push({ start: totalInicio, end: totalFim });\n  }\n}\n\n// Gera os intervalos disponíveis entre 07:00 e 19:00 (cada um com duração de 1 hora)\n// Para cada slot, verifica se há sobreposição com algum evento\nconst horarioDisponivel = [];\nfor (let hora = 7; hora < 19; hora++) {\n  const slotInicio = hora * 60;\n  const slotFim = (hora + 1) * 60;\n  \n  // Verifica se existe algum evento cujo horário se sobrepõe com o slot\n  const ocupado = eventos.some(ev => ev.start < slotFim && ev.end > slotInicio);\n  \n  if (!ocupado) {\n    // Formata o horário com dois dígitos, se necessário\n    const startStr = hora < 10 ? \"0\" + hora : \"\" + hora;\n    const endHour = hora + 1;\n    const endStr = endHour < 10 ? \"0\" + endHour : \"\" + endHour;\n    \n    horarioDisponivel.push(`${startStr}:00-${endStr}:00`);\n  }\n}\n\n// Cria a string final com os horários disponíveis\nconst resultText = \"horarioDisponivel: \" + horarioDisponivel.join(\", \");\nreturn [{ horarioDisponivel: resultText }];",
        "height": 240,
        "width": 280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5760,
        1640
      ],
      "id": "b9ed5c65-3622-4d7f-99a4-8f05d5bc0e39",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "jsCode": "// message_chunker.js\n// Função para uso em Node (ex.: n8n Function Node) que recebe input via $json\n\n/**\n * Divide uma grande mensagem em chunks preservando listas intactas e calculando tempo por chunk.\n * Não separa textos no formato de disponibilidade de horários com emoji de relógio.\n * @param {string} text - O texto recebido como input.\n * @returns {{chunks: {paragraph: string, sequence_number: number, time: number}[]}}\n */\nfunction splitMessageIntoChunks(text) {\n  // Normaliza e trim\n  text = text.replace(/\\r\\n/g, \"\\n\").trim();\n\n  // Padrão de mensagem de disponibilidade de horários (ex.: ⏰ 10:00 ... pergunta)\n  const scheduleRegex = /^.+:\\n\\n(?:⏰.*\\n)+\\n?.*\\?$/m;\n  if (scheduleRegex.test(text)) {\n    return {\n      chunks: [{\n        paragraph: text,\n        sequence_number: 1,\n        time: calculateTempo(text)\n      }]\n    };\n  }\n\n  const chunks = [];\n  let seq = 1;\n  const blocks = text.split(/\\n{2,}/);\n\n  blocks.forEach(block => {\n    const lines = block.split(\"\\n\");\n    // Detecta listas com -, *, números ou emoji de relógio\n    const isList = lines.every(line =>\n      /^\\s*([-*]|\\d+\\.)\\s+/.test(line) || /^\\s*⏰/.test(line)\n    );\n\n    if (isList) {\n      const para = block.trim();\n      chunks.push({ paragraph: para, sequence_number: seq++, time: calculateTempo(para) });\n    } else {\n      const sentences = block.match(/[^.!?]+[.!?]+(?:\\s|$)/g) || [block];\n      let i = 0;\n      while (i < sentences.length) {\n        const groupSize = Math.min(sentences.length - i, 2 + Math.floor(Math.random() * 2));\n        const para = sentences.slice(i, i + groupSize).join(' ').trim();\n        chunks.push({ paragraph: para, sequence_number: seq++, time: calculateTempo(para) });\n        i += groupSize;\n      }\n    }\n  });\n\n  return { chunks };\n}\n\n/**\n * Calcula um tempo de digitação (ms) baseado no tamanho do texto,\n * mais rápido que humano mas com variação natural.\n * Valor base reduzido para produzir tempos menores.\n * @param {string} text\n * @returns {number}\n */\nfunction calculateTempo(text) {\n  const baseMsPerChar = 20; // reduzido de 60ms para 40ms por caractere\n  const variation = 0.8 + Math.random() * 0.4; // variação entre 0.8x e 1.2x\n  return Math.ceil(text.length * baseMsPerChar * variation);\n}\n\n// --- PONTO DE ENTRADA (e.g. n8n Function Node) ---\n// Usa o input informado: {{ $json.data[0].content[0].text.value }}\nconst text = $json.data[0].content[0].text.value;\n\n// Executa chunking com tempo individual\nconst { chunks } = splitMessageIntoChunks(text);\n\n// Retorna para o fluxo de dados\nreturn [{\n  json: { chunks }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1660,
        2740
      ],
      "id": "476f1d76-74b6-49c0-a085-bd27ace44b7c",
      "name": "Code6"
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1840,
        2740
      ],
      "id": "72858105-09c3-4a7a-9807-8591938f33d8",
      "name": "Split Out4",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "129cc250-d535-4d03-ab19-6a8ea2b775f7",
              "name": "chunks",
              "value": "={{ $json.paragraph }}",
              "type": "string"
            },
            {
              "id": "e1383b34-a6b8-4993-a644-cd6d2336b93e",
              "name": "delay",
              "value": "={{ $json.time }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2000,
        2740
      ],
      "id": "3eeaac09-6e67-47ed-8f9d-1c2555654bae",
      "name": "Edit Fields13"
    },
    {
      "parameters": {
        "queue": "messages_clindermy",
        "options": {
          "arguments": {
            "argument": [
              {
                "key": "x-queue-type",
                "value": "quorum"
              }
            ]
          },
          "acknowledge": "executionFinishesSuccessfully",
          "jsonParseBody": true,
          "parallelMessages": -1
        }
      },
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        -5480,
        620
      ],
      "id": "7ca4d814-7e04-4646-93ed-3c9372de19aa",
      "name": "RabbitMQ Trigger",
      "credentials": {
        "rabbitmq": {
          "id": "eFg67tlHOn6E75F4",
          "name": "[fila.aimaze.com.br] - aimazelab"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b6a5fcec-175d-4242-8058-b084d6c69c5c",
              "name": "body",
              "value": "={{ $json.content.body }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5260,
        620
      ],
      "id": "99737d30-905c-4686-8434-d0ab456ab0f1",
      "name": "Webhook"
    },
    {
      "parameters": {
        "jsCode": "// Define o número máximo de caracteres por chunk (ajuste conforme preferir)\nconst maxChars = 300;\n\n// Obtém o texto de entrada a partir do novo caminho\nconst longText = ($json.data && $json.data[0] && $json.data[0].content && $json.data[0].content[0] && $json.data[0].content[0].text && $json.data[0].content[0].text.value) || \"\";\n\n// Verifica se o texto possui características de mensagem de agendamento\nconst schedulingKeywords = [\"⏰\", \"Data:\", \"agendar\", \"disponíveis\"];\nconst isScheduling = schedulingKeywords.some(keyword => longText.includes(keyword));\n\n// Se for uma mensagem de agendamento, retorna o texto completo como único bloco\nif (isScheduling) {\n\treturn [{ chunks: [longText] }];\n}\n\n// Primeiramente, tenta dividir por parágrafos usando quebras duplas de linha\nlet initialChunks = longText.includes(\"\\n\\n\") ? longText.split(/\\n\\s*\\n/) : [longText];\n\n// Array para armazenar os chunks finais\nlet chunks = [];\n\n/**\n * Função auxiliar para dividir um parágrafo muito longo em blocos menores\n * utilizando a separação por sentenças.\n */\nfunction splitLongParagraph(paragraph) {\n  // Se o parágrafo já for menor que o limite, retorna como único chunk\n  if (paragraph.length <= maxChars) {\n    return [paragraph];\n  } else {\n    // Divide o parágrafo em sentenças usando uma regex que detecta pontuação final seguida de espaço e letra maiúscula\n    const sentences = paragraph.split(/(?<=[.?!])\\s+(?=[A-ZÀ-Ú])/);\n    let currentChunk = \"\";\n    let result = [];\n\n    sentences.forEach(sentence => {\n      const trimmedSentence = sentence.trim();\n      // Acumula sentenças enquanto o tamanho do bloco não ultrapasse o limite\n      if ((currentChunk + \" \" + trimmedSentence).trim().length <= maxChars) {\n        currentChunk = (currentChunk + \" \" + trimmedSentence).trim();\n      } else {\n        // Se já houver texto acumulado, salva o bloco e inicia um novo\n        if (currentChunk) {\n          result.push(currentChunk);\n          currentChunk = trimmedSentence;\n        } else {\n          // Caso uma única sentença ultrapasse o limite, força a divisão\n          result.push(trimmedSentence.slice(0, maxChars));\n          currentChunk = trimmedSentence.slice(maxChars);\n        }\n      }\n    });\n    // Adiciona o último bloco, se existir\n    if (currentChunk) result.push(currentChunk);\n    return result;\n  }\n}\n\n// Processa cada bloco inicial; se ultrapassar o limite, subdivide usando a função auxiliar\ninitialChunks.forEach(chunk => {\n  let trimmed = chunk.trim();\n  if (trimmed) {\n    if (trimmed.length > maxChars) {\n      let subChunks = splitLongParagraph(trimmed);\n      chunks = chunks.concat(subChunks);\n    } else {\n      chunks.push(trimmed);\n    }\n  }\n});\n\n// Retorna somente o array com os blocos personalizados\nreturn [{ chunks }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        3140
      ],
      "id": "25823726-a9dd-4792-8e66-f79df53bc576",
      "name": "Code7",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "06d4116e-f6e4-442e-b1d6-56b611cb45db",
              "leftValue": "={{ $json['atendimento finalizado'] }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4800,
        620
      ],
      "id": "c44aa9bc-86ea-4448-bf91-2b59e412f35c",
      "name": "If1",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -4580,
        960
      ],
      "id": "6b090c5f-7bf8-4141-9a8f-2512bb9617e4",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -5480,
        -40
      ],
      "id": "8ab15ff4-3364-4e24-b372-ffe0aaaf9f66",
      "name": "Schedule Trigger",
      "disabled": true
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418625,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3994504,
                "value": "true "
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -5280,
        -80
      ],
      "id": "c1ad9228-93ae-4c82-a3c3-4f00cdb7740b",
      "name": "Baserow",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3994504,
              "fieldValue": "false"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -4760,
        -220
      ],
      "id": "9ad48592-8fed-4c72-a0f0-0805aca4eaba",
      "name": "Baserow2",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "96080ee5-de5b-4aed-bbd1-51356bb34629",
              "leftValue": "={{ $json['Created on'] }}",
              "rightValue": "={{ $json[\"Created on\"].toDateTime().plus({ minutes: 3 }).toISO() }}",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5060,
        -80
      ],
      "id": "a6309d82-e571-4ef0-b6dd-38edb71fc413",
      "name": "If5"
    },
    {
      "parameters": {
        "content": "## atualiza atendimento \n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 600,
        "width": 1240
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5660,
        -400
      ],
      "id": "4b320a0e-0c67-48ad-90a8-2a1d4ddf48f4",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "returnAll": true,
        "timeMin": "2025-04-17T00:00:00",
        "timeMax": "2025-04-17T23:59:59",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -4380,
        -640
      ],
      "id": "5b3f8156-fe5b-4bb4-89c5-614e2bd9842e",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "evento"
            }
          ]
        },
        "options": {
          "outputFormat": "singleItem"
        }
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        -3720,
        -640
      ],
      "id": "46f0f01f-dd69-45d6-9751-971d83674f90",
      "name": "Summarize2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"horarios_disponiveis_no_dia: {{ $json.horarioDisponivel }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3060,
        -640
      ],
      "id": "5cae5662-b769-4246-9150-b9e5d549eae3",
      "name": "output3"
    },
    {
      "parameters": {
        "jsCode": "// 1. Parâmetros que você pode ajustar:\nconst businessStart = '08:00';      // início do expediente\nconst businessEnd   = '19:00';      // fim do expediente\nconst durationMinutes = 30;         // duração de cada slot em minutos\n\n// 2. Função para transformar \"HH:MM\" em minutos desde 00:00\nfunction toMin(t) {\n  const [h, m] = t.split(':').map(Number);\n  return h * 60 + m;\n}\n// e de volta\nfunction toTime(m) {\n  const hh = String(Math.floor(m/60)).padStart(2,'0');\n  const mm = String(m%60).padStart(2,'0');\n  return `${hh}:${mm}`;\n}\n\n// 3. Extrai events de uma string como:\n//    \"data_comeco: 2025-04-17T13:00:00-03:00, data_fim: 2025-04-17T13:30:00-03:00. ... \"\nconst raw = $json.concatenated_evento;\nconst re = /data_comeco:\\s*([\\d\\-T:\\.]+?),\\s*data_fim:\\s*([\\d\\-T:\\.]+)/g;\nlet m, events = [];\nwhile ((m = re.exec(raw))) {\n  // pega só a parte \"HH:MM\" após o \"T\"\n  const startHM = m[1].split('T')[1].substr(0,5);\n  const endHM   = m[2].split('T')[1].substr(0,5);\n  events.push({\n    start: toMin(startHM),\n    end:   toMin(endHM)\n  });\n}\n\n// 4. Ordena e gera intervalos livres\nevents.sort((a,b) => a.start - b.start);\nconst dayStart = toMin(businessStart);\nconst dayEnd   = toMin(businessEnd);\n\nlet freeIntervals = [];\nlet cursor = dayStart;\nfor (const ev of events) {\n  if (ev.start > cursor) {\n    freeIntervals.push({ start: cursor, end: ev.start });\n  }\n  cursor = Math.max(cursor, ev.end);\n}\nif (cursor < dayEnd) {\n  freeIntervals.push({ start: cursor, end: dayEnd });\n}\n\n// 5. Subdivide cada intervalo livre em slots de durationMinutes\nlet availableSlots = [];\nfor (const iv of freeIntervals) {\n  let s = iv.start;\n  while (s + durationMinutes <= iv.end) {\n    availableSlots.push(`${toTime(s)}-${toTime(s + durationMinutes)}`);\n    s += durationMinutes;\n  }\n}\n\n// 6. Retorna no formato desejado\nreturn [\n  {\n    json: {\n      horarios_disponiveis: availableSlots.join(',')\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3280,
        -640
      ],
      "id": "c8da0a30-e1b5-4abf-8fdb-864fb260b1fc",
      "name": "Code3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3940,
        -640
      ],
      "id": "77f1ec44-1cb0-464c-a724-29b338218eee",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "dcd908df-43bf-4847-828c-7f6aeb865ee8",
              "leftValue": "={{ !!Object.keys($node[\"calendar \"].data).length }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4320,
        -2640
      ],
      "id": "42916df1-df47-482d-8874-b0f69d2db837",
      "name": "If6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "d7a3c4c8-5729-4ead-983c-9ffae19666d8",
              "name": "htmlLink",
              "value": "={{ $json.htmlLink }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4540,
        -2540
      ],
      "id": "f036646c-0517-4957-a339-194eb9f7ca28",
      "name": "Separa dados calendar6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4760,
        -2540
      ],
      "id": "09fbdb9f-532e-4ee3-9b4c-fcd4635a4490",
      "name": "Edit Fields10"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"verificacao: o usuário possui os seguintes eventos,{{ $json.evento }}.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4980,
        -2540
      ],
      "id": "e61e1460-515b-420d-967f-753ae0f9ef78",
      "name": "output8"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "limit": 3,
        "timeMax": "={{ $now.plus({ week: 4 }) }}",
        "options": {
          "query": "={{ $json.arguments.descricao }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        4100,
        -2640
      ],
      "id": "a4fd9fb5-cde9-424d-ba16-f0db487cfea7",
      "name": "calendar ",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"verificacao: o usuário não possui nenhum evento agendado.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4980,
        -2820
      ],
      "id": "da2a8680-7c9e-47bd-b777-335cdcc682f5",
      "name": "output9"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "start": "={{ $('Escolhe Função1').item.json.arguments.data_inicio }}",
        "end": "={{ $('Escolhe Função1').item.json.arguments.data_fim }}",
        "additionalFields": {
          "description": "={{ $('separa argumentos1').item.json.arguments.descricao }}",
          "summary": "={{ $('separa argumentos1').item.json.arguments.assunto }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -160,
        -4740
      ],
      "id": "7e7e2a18-b46b-41cc-b4ca-b337dd59b90f",
      "name": "Google Calendar6",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        -4740
      ],
      "id": "84b110bd-192e-4016-b996-472b4547d1b8",
      "name": "Separa dados calendar1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        280,
        -4740
      ],
      "id": "b3fb06a0-b456-4797-aa0a-a70edffb01cb",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"agendado: {{ $json.evento }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        500,
        -4740
      ],
      "id": "db0f2ba6-caa3-42b3-b061-f0fce760e571",
      "name": "output6"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "dcd908df-43bf-4847-828c-7f6aeb865ee8",
              "leftValue": "={{ !!Object.keys($node[\"calendar 10\"].data).length }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -380,
        -4640
      ],
      "id": "d11ef386-b046-445c-aef5-53bea13c7148",
      "name": "If7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "d7a3c4c8-5729-4ead-983c-9ffae19666d8",
              "name": "htmlLink",
              "value": "={{ $json.htmlLink }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "bb4b1f69-4eed-4e70-8f0b-3498b3ecda62",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        100,
        -4500
      ],
      "id": "437b3a51-4bc0-40dd-a96b-aa0e3d7b93dc",
      "name": "Separa dados calendar7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }}, data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}. descricao: {{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        300,
        -4520
      ],
      "id": "08842caa-a90f-40e7-afc1-4083020db2dd",
      "name": "Edit Fields11"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"verificacao: o usuário possui os seguintes eventos,{{ $json.evento }}. Verifique se ele quer reagendar ou agendar um novo procedimento.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        500,
        -4520
      ],
      "id": "24ae695c-8f99-43b6-ba9e-21b56fc8b37c",
      "name": "output10"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "limit": 3,
        "timeMax": "={{ $now.plus({ week: 4 }) }}",
        "options": {
          "query": "={{ $json.arguments.descricao }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -600,
        -4640
      ],
      "id": "073ce6d9-62a5-40b9-9cfc-78309aa15741",
      "name": "calendar 10",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "content": "## backup agendar reunião antigo.\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 560,
        "width": 1740
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -820,
        -4860
      ],
      "id": "2cefc235-0d08-444e-b7b6-6b0bac567e6b",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4160,
        -640
      ],
      "id": "22dcaa09-ec2f-4446-a785-8f6d54b7d2ac",
      "name": "Separa dados calendar5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5cc661a5-e14c-49f8-95bb-61ac66512b90",
              "name": "concatenated_evento",
              "value": "={{ $json.concatenated_evento }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3500,
        -640
      ],
      "id": "e120e4f7-a615-4472-9696-0f973647ffb2",
      "name": "Edit Fields7"
    },
    {
      "parameters": {
        "content": "## código que crie lista de horario de 30 em 30 min considerando fuso\n\n\n\n\n\n\n\n\n\n\n\n\n// 1) Extrai eventos via regex\nconst raw = $json.concatenated_evento;\nconst regex = /data_comeco:\\s*([\\d\\-T:+]+),\\s*data_fim:\\s*([\\d\\-T:+]+)/g;\nlet m, events = [];\nwhile (m = regex.exec(raw)) {\n  events.push({ start: m[1], end: m[2] });\n}\n\n// 2) Define dia e horário útil 08:00–19:00 ( São Paulo = -03:00 )\nconst date = events[0].start.slice(0,10);      // \"2025-04-16\"\nconst tz   = '-03:00';\nconst businessStart = new Date(`${date}T08:00:00${tz}`);\nconst businessEnd   = new Date(`${date}T19:00:00${tz}`);\n\n// 3) Gera slots de 30 min\nconst slotMinutes = 30;\nlet cursor = new Date(businessStart);\nconst allSlots = [];\nwhile (cursor < businessEnd) {\n  allSlots.push(new Date(cursor));\n  cursor.setMinutes(cursor.getMinutes() + slotMinutes);\n}\n\n// 4) Filtra fora dos blocos ocupados\nconst available = allSlots.filter(slot => {\n  const t = slot.getTime();\n  return !events.some(ev => {\n    const startT = new Date(ev.start).getTime();\n    const endT   = new Date(ev.end).getTime();\n    return t >= startT && t < endT;\n  });\n});\n\n// 5) Formata HH:mm, remove duplicatas só por garantia e junta em vírgula\nconst times = Array.from(new Set(\n  available.map(s =>\n    s.toLocaleTimeString('pt-BR', { hour:'2-digit', minute:'2-digit', timeZone:'America/Sao_Paulo' })\n  )\n));\nconst horario_disponivel = times.join(', ');\n\n// 6) Retorna único item com a lista\nreturn [\n  { json: { horario_disponivel } }\n];",
        "height": 320,
        "width": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5460,
        1900
      ],
      "id": "30e85636-854b-48b9-bd35-bed30c7e8d86",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "jsCode": "// 1) Extrai eventos via regex\nconst raw = $json.concatenated_evento;\nconst regex = /data_comeco:\\s*([\\d\\-T:+]+),\\s*data_fim:\\s*([\\d\\-T:+]+)/g;\nlet m, events = [];\nwhile (m = regex.exec(raw)) {\n  events.push({ start: m[1], end: m[2] });\n}\n\n// 2) Define dia e horário útil 08:00–19:00 ( São Paulo = -03:00 )\nconst date = events[0].start.slice(0,10);      // \"2025-04-16\"\nconst tz   = '-03:00';\nconst businessStart = new Date(`${date}T08:00:00${tz}`);\nconst businessEnd   = new Date(`${date}T19:00:00${tz}`);\n\n// 3) Gera slots de 30 min\nconst slotMinutes = 30;\nlet cursor = new Date(businessStart);\nconst allSlots = [];\nwhile (cursor < businessEnd) {\n  allSlots.push(new Date(cursor));\n  cursor.setMinutes(cursor.getMinutes() + slotMinutes);\n}\n\n// 4) Filtra fora dos blocos ocupados\nconst available = allSlots.filter(slot => {\n  const t = slot.getTime();\n  return !events.some(ev => {\n    const startT = new Date(ev.start).getTime();\n    const endT   = new Date(ev.end).getTime();\n    return t >= startT && t < endT;\n  });\n});\n\n// 5) Formata HH:mm, remove duplicatas só por garantia e junta em vírgula\nconst times = Array.from(new Set(\n  available.map(s =>\n    s.toLocaleTimeString('pt-BR', { hour:'2-digit', minute:'2-digit', timeZone:'America/Sao_Paulo' })\n  )\n));\nconst horario_disponivel = times.join(', ');\n\n// 6) Retorna único item com a lista\nreturn [\n  { json: { horario_disponivel } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5380,
        2040
      ],
      "id": "47a23677-2f31-4d26-9837-01986ef68d29",
      "name": "Code4"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "returnAll": true,
        "timeMin": "={{ $json.arguments.inicio }}",
        "timeMax": "={{ $json.arguments.fim }}",
        "options": {
          "timeZone": {
            "__rl": true,
            "value": "America/Sao_Paulo",
            "mode": "list",
            "cachedResultName": "America/Sao_Paulo"
          }
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -780,
        -5220
      ],
      "id": "7e5e1e65-28de-4017-b4e3-561615eb8b45",
      "name": "Google Calendar7",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "evento"
            }
          ]
        },
        "options": {
          "outputFormat": "singleItem"
        }
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        -120,
        -5220
      ],
      "id": "f4549fb7-d04d-4266-b624-d1e07328ad0c",
      "name": "Summarize3"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"horarios_disponiveis_no_dia: {{ $json.horario_disponivel }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        320,
        -5220
      ],
      "id": "76a2470e-4b67-4b1a-a607-bddeda6f9ef4",
      "name": "output7"
    },
    {
      "parameters": {
        "jsCode": "// 1) Extrai eventos via regex\nconst raw = $json.concatenated_evento;\nconst regex = /data_comeco:\\s*([\\d\\-T:+]+),\\s*data_fim:\\s*([\\d\\-T:+]+)/g;\nlet m, events = [];\nwhile (m = regex.exec(raw)) {\n  events.push({ start: m[1], end: m[2] });\n}\n\n// 2) Define dia e horário útil 08:00–19:00 ( São Paulo = -03:00 )\nconst date = events[0].start.slice(0,10);      // \"2025-04-16\"\nconst tz   = '-03:00';\nconst businessStart = new Date(`${date}T08:00:00${tz}`);\nconst businessEnd   = new Date(`${date}T19:00:00${tz}`);\n\n// 3) Gera slots de 30 min\nconst slotMinutes = 30;\nlet cursor = new Date(businessStart);\nconst allSlots = [];\nwhile (cursor < businessEnd) {\n  allSlots.push(new Date(cursor));\n  cursor.setMinutes(cursor.getMinutes() + slotMinutes);\n}\n\n// 4) Filtra fora dos blocos ocupados\nconst available = allSlots.filter(slot => {\n  const t = slot.getTime();\n  return !events.some(ev => {\n    const startT = new Date(ev.start).getTime();\n    const endT   = new Date(ev.end).getTime();\n    return t >= startT && t < endT;\n  });\n});\n\n// 5) Formata HH:mm, remove duplicatas só por garantia e junta em vírgula\nconst times = Array.from(new Set(\n  available.map(s =>\n    s.toLocaleTimeString('pt-BR', { hour:'2-digit', minute:'2-digit', timeZone:'America/Sao_Paulo' })\n  )\n));\nconst horario_disponivel = times.join(', ');\n\n// 6) Retorna único item com a lista\nreturn [\n  { json: { horario_disponivel } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        100,
        -5220
      ],
      "id": "edbd539c-858c-413c-a89b-c99302ead50d",
      "name": "Code5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9aefd0b5-d1ff-4d18-ada1-12162c5142d1",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bb57fb9e-d810-4386-a8b1-51b1ebd28e13",
              "name": "summary",
              "value": "={{ $json.summary }}",
              "type": "string"
            },
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -560,
        -5220
      ],
      "id": "9e51a3ad-8c46-4aa1-8bdd-2275f3ff883d",
      "name": "Separa dados calendar3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=id: {{ $json.id }},  data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}. Titulo: {{ $json.summary }}.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -340,
        -5220
      ],
      "id": "e0d460ab-7626-4927-b9bf-6e92309277f5",
      "name": "Edit Fields9"
    },
    {
      "parameters": {
        "content": "## backupverificar horarios\n\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 340,
        "width": 1740
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -840,
        -5360
      ],
      "id": "12437b81-01ea-42e7-a5d9-f0e9d0065c9a",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cbe1040-ee6b-4c50-80be-d6b263dd9727",
              "name": "concatenated_evento",
              "value": "={{ $json.concatenated_evento }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        8140,
        -3080
      ],
      "id": "9668e9f1-bb80-4ab4-9eeb-ecf4d46ab9f0",
      "name": "Edit Fields12"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"mensagem enviada com sucesso.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5260,
        -3220
      ],
      "id": "50c87d76-efe1-4c58-b18e-b434982196aa",
      "name": "output11"
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418625,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3210935,
                "value": "={{ $json.arguments.phone_number }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2960,
        -3220
      ],
      "id": "7b965047-e44c-4eec-8883-49c47038b754",
      "name": "Baserow5",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3994504,
              "fieldValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3680,
        -3220
      ],
      "id": "dafa9de3-56d4-4196-a018-e19335cc73f3",
      "name": "Baserow6",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "aimaze",
        "remoteJid": "=120363418674438624@g.us",
        "messageText": "=Atendimento Agendado ✅\n--\n{{ $('Escolhe Função1').item.json.arguments.servico_cliente }}\n{{ $('Escolhe Função1').item.json.arguments.descricao }}\n\nlink:{{ $('Escolhe Função1').item.json.arguments.link }}\nnumero: {{ $('Escolhe Função1').item.json.arguments.fone_number }}",
        "options_message": {
          "delay": 1200,
          "linkPreview": false
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        4360,
        -3220
      ],
      "id": "352ebaff-3b75-43b8-9be1-ba0b7100b6e7",
      "name": "Evolution API3",
      "credentials": {
        "evolutionApi": {
          "id": "TgOTPEmUw6n2wmlf",
          "name": "Evolution Clindermy"
        }
      }
    },
    {
      "parameters": {
        "databaseId": 168854,
        "tableId": 418625,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3210935,
                "value": "={{ $json.arguments.phone_number }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2740,
        -3700
      ],
      "id": "3da1987d-0a48-4010-879e-dcb8ea1c117d",
      "name": "Baserow7",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 168854,
        "tableId": 418625,
        "rowId": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3994504,
              "fieldValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2960,
        -3700
      ],
      "id": "449dce3a-e300-473b-9bbf-80b48ff6d2c1",
      "name": "Baserow8",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"Atendimento encerrado. Muito obrigado, qualquer dúvida estou a disposição.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5240,
        -3700
      ],
      "id": "2389708c-e190-4e7d-9344-d0e489d08eda",
      "name": "output12"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d4b2a295-b0f4-4f44-9951-40b3d6e31625",
              "name": "text",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1460,
        3340
      ],
      "id": "a3089014-365d-4085-b4f3-2d98d778ce17",
      "name": "Edit Fields14"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        3340
      ],
      "id": "af26f9f2-40be-4e11-9370-a4fabfbf1d3b",
      "name": "Code8"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Merge - user').item.json.thread_id }}/messages?order=desc",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "c03c4ffd-2eec-457d-928c-2f8162842354",
      "name": "Pega a ultima mensagem1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1300,
        4240
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// message_chunker.js\n// Função para uso em Node (ex.: n8n Function Node) que recebe input via $json\n\n/**\n * Divide uma grande mensagem em chunks preservando listas intactas e calculando tempo por chunk.\n * Não separa textos no formato de disponibilidade de horários com emoji de relógio.\n * @param {string} text - O texto recebido como input.\n * @returns {{chunks: {paragraph: string, sequence_number: number, time: number}[]}}\n */\nfunction splitMessageIntoChunks(text) {\n  // Normaliza e trim\n  text = text.replace(/\\r\\n/g, \"\\n\").trim();\n\n  // Padrão de mensagem de disponibilidade de horários (ex.: ⏰ 10:00 ... pergunta)\n  const scheduleRegex = /^.+:\\n\\n(?:⏰.*\\n)+\\n?.*\\?$/m;\n  if (scheduleRegex.test(text)) {\n    return {\n      chunks: [{\n        paragraph: text,\n        sequence_number: 1,\n        time: calculateTempo(text)\n      }]\n    };\n  }\n\n  const chunks = [];\n  let seq = 1;\n  const blocks = text.split(/\\n{2,}/);\n\n  blocks.forEach(block => {\n    const lines = block.split(\"\\n\");\n    // Detecta listas com -, *, números ou emoji de relógio\n    const isList = lines.every(line =>\n      /^\\s*([-*]|\\d+\\.)\\s+/.test(line) || /^\\s*⏰/.test(line)\n    );\n\n    if (isList) {\n      const para = block.trim();\n      chunks.push({ paragraph: para, sequence_number: seq++, time: calculateTempo(para) });\n    } else {\n      const sentences = block.match(/[^.!?]+[.!?]+(?:\\s|$)/g) || [block];\n      let i = 0;\n      while (i < sentences.length) {\n        const groupSize = Math.min(sentences.length - i, 2 + Math.floor(Math.random() * 2));\n        const para = sentences.slice(i, i + groupSize).join(' ').trim();\n        chunks.push({ paragraph: para, sequence_number: seq++, time: calculateTempo(para) });\n        i += groupSize;\n      }\n    }\n  });\n\n  return { chunks };\n}\n\n/**\n * Calcula um tempo de digitação (ms) baseado no tamanho do texto,\n * mais rápido que humano mas com variação natural.\n * Valor base reduzido para produzir tempos menores.\n * @param {string} text\n * @returns {number}\n */\nfunction calculateTempo(text) {\n  const baseMsPerChar = 15; // reduzido de 60ms para 40ms por caractere\n  const variation = 0.8 + Math.random() * 0.4; // variação entre 0.8x e 1.2x\n  return Math.ceil(text.length * baseMsPerChar * variation);\n}\n\n// --- PONTO DE ENTRADA (e.g. n8n Function Node) ---\n// Usa o input informado: {{ $json.data[0].content[0].text.value }}\nconst text = $json.data[0].content[0].text.value;\n\n// Executa chunking com tempo individual\nconst { chunks } = splitMessageIntoChunks(text);\n\n// Retorna para o fluxo de dados\nreturn [{\n  json: { chunks }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1580,
        4240
      ],
      "id": "557e2cfd-3caf-49b9-94e0-384b40be590c",
      "name": "Code9"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        4600
      ],
      "id": "87dda744-301c-434f-bad0-d43d08547edf",
      "name": "Code10"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        4680
      ],
      "id": "059d04fb-20c2-4a59-90cd-7e0fc6e1a352",
      "name": "Code11"
    },
    {
      "parameters": {
        "databaseId": 216369,
        "tableId": 520558,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 4135294,
                "value": "={{ $json.arguments.procedimento_id }}"
              },
              {
                "field": 4135311,
                "value": "={{ $json.arguments.procedimento_nome }}"
              }
            ]
          },
          "filterType": "OR"
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2320,
        240
      ],
      "id": "bda63abc-593b-43b0-aab9-93a4054b3fa0",
      "name": "Baserow9",
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": \"procedimentos_solicitados: {{ $json.concatenated_procedimentos }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4580,
        920
      ],
      "id": "1d92b429-83d4-44be-955e-6274ff4a8bdd",
      "name": "Prepara outpoot4"
    },
    {
      "parameters": {
        "databaseId": 216369,
        "tableId": 520558,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 4135311,
                "value": "="
              },
              {
                "field": 4135294,
                "value": "c1b0dc63-b516-4b9c-aa91-d080a18984b0"
              }
            ]
          },
          "filterType": "OR"
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2300,
        560
      ],
      "id": "dce5d9df-4c53-460f-a916-cb98d57a20e3",
      "name": "Baserow10",
      "alwaysOutputData": true,
      "credentials": {
        "baserowApi": {
          "id": "jODihG7gncUc7khv",
          "name": "[baserow.io] - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e1bf85e9-6321-4e66-b5d6-4da01624b3ed",
              "name": "uuid",
              "value": "={{ $json.uuid }}",
              "type": "string"
            },
            {
              "id": "14597b6b-00d0-4262-8edb-c2e1fd3e8b24",
              "name": "Procedimento",
              "value": "={{ $json.Procedimento }}",
              "type": "string"
            },
            {
              "id": "5648d467-3d70-4226-adda-359d4b3f9e3a",
              "name": "Description",
              "value": "={{ $json.Description }}",
              "type": "string"
            },
            {
              "id": "43ee9662-d1a9-40d5-804a-8eb1dd618b5e",
              "name": "Time_procedimento",
              "value": "={{ $json.Time_procedimento }}",
              "type": "string"
            },
            {
              "id": "02ad071e-2ff7-43e7-b1ae-780b2a4271de",
              "name": "Cobra avaliação?",
              "value": "={{ $json[\"Cobra avaliação?\"] }}",
              "type": "string"
            },
            {
              "id": "1d47c10c-8617-437c-994e-6a8d7c4d53b5",
              "name": "Cuidados Pre-avaliacao",
              "value": "={{ $json[\"Cuidados Pre-avaliacao\"] }}",
              "type": "string"
            },
            {
              "id": "c251e087-617c-4e6d-97f4-760f2ab0452d",
              "name": "Cuidados pos-avaliacao",
              "value": "={{ $json[\"Cuidados pos-avaliacao\"] }}",
              "type": "string"
            },
            {
              "id": "99ab3e1a-f729-40b5-be8c-d68c05d9b734",
              "name": "Up-sell",
              "value": "={{ $json[\"Up-sell\"] }}",
              "type": "string"
            },
            {
              "id": "c5e2dab8-665a-4896-99c9-090e97bd6aeb",
              "name": "Reclamacoes que motivam o procedimento",
              "value": "={{ $json[\"Reclamacoes que motivam o procedimento\"] }}",
              "type": "string"
            },
            {
              "id": "321f6003-9c27-451b-8e05-9a7b212ae447",
              "name": "Motivo da cobranca",
              "value": "={{ $json[\"Motivo da cobranca\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3960,
        920
      ],
      "id": "3b656ffa-5d7c-4c8a-916b-ddffc5337efb",
      "name": "Edit Fields15"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        2100,
        560
      ],
      "id": "f110aa1d-57e5-4047-9472-2b1276389f8c",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7dbff461-cfb8-4203-b581-613680117bb6",
              "name": "procedimentos",
              "value": "=uuid: {{ $json.uuid }}, Procedimento: {{ $json.Procedimento }}, Descrição do procedimento: {{ $json.Description }}, tempo de execução do procedimento: {{ $json.Time_procedimento }} minutos, É cobrado avaliação? {{ $json['Cobra avaliação?'] }}, motivo cobrança: {{ $json['Motivo da cobranca'] }}, Cuidados pre-procedimento/avaliação: {{ $json['Cuidados Pre-avaliacao'] }}, Cuidados pós-procedimento/avaliação: {{ $json['Cuidados pos-avaliacao'] }}, serviços para indicar após fazer esse procedimento: {{ $json['Up-sell'] }}, Principais motivos para a pessoa solicitar o seviço de {{ $json.Procedimento }}: {{ $json['Reclamacoes que motivam o procedimento'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4180,
        920
      ],
      "id": "487ff3f2-1800-4bf8-8e84-40c9948db7ca",
      "name": "Edit Fields16"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "procedimentos"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        4400,
        920
      ],
      "id": "959594e8-d472-4b37-bbba-7af58f3e5e19",
      "name": "Summarize4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4204a376-2f1b-4e87-8e22-15caa6df790e",
              "leftValue": "={{ $('Google Calendar4').item.json.isEmpty() }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3660,
        -1780
      ],
      "id": "74ce111d-efa0-4e2d-8e88-c2e67dd08868",
      "name": "É feriado?"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "returnAll": true,
        "timeMin": "={{ $('Escolhe Função1').item.json.arguments.inicio }}",
        "timeMax": "={{ $('Escolhe Função1').item.json.arguments.fim }}",
        "options": {
          "timeZone": {
            "__rl": true,
            "value": "America/Sao_Paulo",
            "mode": "list",
            "cachedResultName": "America/Sao_Paulo"
          }
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3900,
        -1600
      ],
      "id": "bbaaccbe-0a3f-4856-ae26-925e749260d3",
      "name": "Google Calendar4sdasd",
      "alwaysOutputData": true,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "evento"
            }
          ]
        },
        "options": {
          "outputFormat": "singleItem"
        }
      },
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1.1,
      "position": [
        4560,
        -1600
      ],
      "id": "a24cf789-f131-4dd4-9852-c401ea951605",
      "name": "Summarize5"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"horarios_disponiveis_no_dia: {{ $json.horarios_disponiveis }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5220,
        -1600
      ],
      "id": "46b3e5db-8aa8-4480-b840-42999a10838d",
      "name": "output13"
    },
    {
      "parameters": {
        "jsCode": "// ============ parâmetros “fáceis de mexer” =============\nconst inicioExpediente = 8;   // 08:00\nconst fimExpediente    = 19;  // 19:00  (o último slot será 18:30‑19:00)\nconst passoMinutos     = 30;  // tamanho do slot\n// =======================================================\n\n// 1. Entrada -------------------------------------------------------------\nconst entrada = $json.concatenated_evento ?? '';\n\n/* Entrada esperada (exemplo):\n   data_comeco: 2025-04-17T15:00:00-03:00, data_fim: 2025-04-17T16:00:00-03:00.,\n   data_comeco: 2025-04-17T17:00:00-03:00, data_fim: 2025-04-17T17:30:00-03:00.\n*/\n\n// 2. Extrai períodos ocupados -------------------------------------------\nconst busyRegex = /data_comeco:\\s*([\\d\\-T:+]+),\\s*data_fim:\\s*([\\d\\-T:+]+)\\.?/g;\nconst ocupados = []; // {iniMin, fimMin}\nlet m;\nwhile ((m = busyRegex.exec(entrada)) !== null) {\n  ocupados.push({\n    iniMin: isoToMinutes(m[1]),\n    fimMin: isoToMinutes(m[2]),\n  });\n}\n\n// 3. Gera slots disponíveis ---------------------------------------------\nconst disponiveis = [];\nfor (let iniMin = inicioExpediente * 60;\n     iniMin < fimExpediente * 60;\n     iniMin += passoMinutos) {\n\n  const fimMin = iniMin + passoMinutos;\n\n  // colisão?  (slotStart < busyEnd) && (slotEnd > busyStart)\n  const colide = ocupados.some(({iniMin: bIni, fimMin: bFim}) =>\n                                iniMin < bFim && fimMin > bIni);\n  if (colide) continue;\n\n  disponiveis.push(`${formatHHMM(iniMin)}-${formatHHMM(fimMin)}`);\n}\n\n// 4. Retorno -------------------------------------------------------------\nreturn [\n  {\n    json: {\n      horarios_disponiveis: disponiveis.join(', ')\n    }\n  }\n];\n\n// ============ utilitários ==============================================\nfunction isoToMinutes(iso) {\n  // “2025‑04‑17T15:00:00‑03:00” → 15*60 + 0\n  const timePart = iso.split('T')[1];      // 15:00:00‑03:00\n  const [hh, mm] = timePart.split(':');\n  return Number(hh) * 60 + Number(mm);\n}\n\nfunction formatHHMM(minutos) {\n  const hh = String(Math.floor(minutos / 60)).padStart(2, '0');\n  const mm = String(minutos % 60).padStart(2, '0');\n  return `${hh}:${mm}`;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5000,
        -1600
      ],
      "id": "c21db63b-225c-4acd-b1dd-a8ba2456db6f",
      "name": "Code12"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "80427945-f73e-4654-ae2b-5a1d11e90784",
              "name": "start",
              "value": "={{ $json.start.dateTime }}",
              "type": "string"
            },
            {
              "id": "419d8b13-1e36-4c2e-b867-f61e95565ba5",
              "name": "end",
              "value": "={{ $json.end.dateTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4120,
        -1600
      ],
      "id": "56e2c646-7dc9-413f-bb43-4dfbec2c726b",
      "name": "Separa dados calendar8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0fd740f-358f-46b2-8bbc-4f3c25ebf135",
              "name": "=evento",
              "value": "=data_comeco: {{ $json.start }}, data_fim: {{ $json.end }}.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4340,
        -1600
      ],
      "id": "6c87c91b-eb14-4ea0-9aec-52c5e6875e05",
      "name": "Edit Fields17"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cbe1040-ee6b-4c50-80be-d6b263dd9727",
              "name": "concatenated_evento",
              "value": "={{ $json.concatenated_evento }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4780,
        -1600
      ],
      "id": "f239a71d-acd3-4928-9b7c-5190391376f8",
      "name": "Edit Fields18"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"Este dia é feriado de {{ $json.summary }} em {{ $json.creator.displayName }}, data de inicio: {{ $json.start.date }}, datafim: {{ $json.end.date }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5200,
        -1800
      ],
      "id": "50ec9deb-bb2c-4477-b2ca-bf328953a6c5",
      "name": "output14"
    },
    {
      "parameters": {
        "height": 320,
        "width": 1620
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        7420,
        -3180
      ],
      "id": "126968aa-c8ed-403a-b8c9-b38d3a723c06",
      "name": "Sticky Note24"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Webhook').item.json.body.data.key.remoteJid }}_block",
        "value": "true",
        "expire": true,
        "ttl": 900
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4300,
        1460
      ],
      "id": "badca0aa-ceae-47b4-855b-61aacd41d631",
      "name": "block IA",
      "credentials": {
        "redis": {
          "id": "d4AxnEWEdF6ojBXg",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "26c09024-ef02-4462-ae6c-7db6286b7e21",
              "leftValue": "={{ $json.available }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4040,
        1560
      ],
      "id": "49f8b130-8ef9-43fb-a3f4-0134c00ee2a9",
      "name": "Está livre o horario?"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"transferencia: Estou transferindo seu atendimento para Joziani, já avisei ela sobre sua questão. Daqui a pouco ela irá te responder. Muito obrigado 😊\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4520,
        1460
      ],
      "id": "58511741-fa25-4a5f-980d-3dc3cc7b8e2e",
      "name": "Não está em atendimento"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"output\": \"transferencia: Estou transferindo seu atendimento para Joziani, já avisei ela sobre sua questão. No momento ela está em atendimento, assim que ela terminar ela irá te responder.\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4520,
        1660
      ],
      "id": "15a90f8a-9a3f-4134-a51d-5963ae06ec27",
      "name": "Esta está em atendimento"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Webhook').item.json.body.data.key.remoteJid }}_block",
        "value": "true",
        "expire": true,
        "ttl": 900
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4300,
        1660
      ],
      "id": "9e8498de-03b2-4c1b-a4b8-5726867aec53",
      "name": "block IA1",
      "credentials": {
        "redis": {
          "id": "d4AxnEWEdF6ojBXg",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "resource": "calendar",
        "calendar": {
          "__rl": true,
          "value": "aimazemachine@gmail.com",
          "mode": "list",
          "cachedResultName": "aimazemachine@gmail.com"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        3780,
        1560
      ],
      "id": "80c10ad5-07f6-4f9c-b9d3-8d8dac46170a",
      "name": "Google Calendar2",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Eqt8e2WwupPypoIC",
          "name": "[calendar.google.com] - aimazemachine@gmail.com"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=553899225622@s.whatsapp.net_block"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4300,
        1240
      ],
      "id": "5189fdec-d1d9-45b7-8a7a-7075d64f3498",
      "name": "block IA2",
      "credentials": {
        "redis": {
          "id": "d4AxnEWEdF6ojBXg",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e527fa77-d28a-40d7-968d-240244fad290",
              "name": "user",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "196178c7-428f-4659-a151-4e3e9a92abfe",
              "name": "mensagem",
              "value": "={{ $('Webhook').item.json.body.data.message.conversation }}",
              "type": "string"
            },
            {
              "id": "65caa246-e113-43f3-9262-94cd42af7c36",
              "name": "message.event",
              "value": "={{ $('Webhook').item.json.body.data.key.fromMe? 'outcoming' : 'incoming' }}",
              "type": "string"
            },
            {
              "id": "db64a615-c9aa-48f1-8802-89ccfcd0ddf4",
              "name": "instance.name",
              "value": "={{ $('Webhook').item.json.body.instance }}",
              "type": "string"
            },
            {
              "id": "b88e7b97-4f27-43f5-9a30-bb84b49e8c22",
              "name": "instanceId",
              "value": "={{ $('Webhook').item.json.body.data.key.id }}",
              "type": "string"
            },
            {
              "id": "92228661-6530-48d5-8452-8b1b6f99068b",
              "name": "senderName",
              "value": "={{ $('Webhook').item.json.body.data.key.fromMe? 'Mensagem da empresa' : 'Mensagem usuário' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2040,
        -2000
      ],
      "id": "3f4ea926-1202-445a-ad9a-5530a64d20d2",
      "name": "Normalização1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.event }}",
                    "rightValue": "outcoming",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "0185e09f-7d53-4b94-ad47-bf4028b9f78f"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "outcoming"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d6dc8354-ab60-44ff-b8ee-84a44983e37b",
                    "leftValue": "={{ $json.message.event }}",
                    "rightValue": "incoming",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "incoming"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1820,
        -2000
      ],
      "id": "1f8e40eb-5903-4a84-8d86-693a4614308c",
      "name": "Switch5"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "block",
        "key": "={{ $('Normalização1').item.json.user }}_block",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1600,
        -1900
      ],
      "id": "86244bb8-3530-489d-af30-de6925b6e203",
      "name": "block IA6",
      "credentials": {
        "redis": {
          "id": "d4AxnEWEdF6ojBXg",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.block }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "empty",
                      "singleValue": true
                    },
                    "id": "b6b6e3df-8385-4514-a462-c9f22d271436"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "IA PODE RESPONDER"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d985fdf5-0ede-4673-994d-734154600b3e",
                    "leftValue": "={{ $json.block }}",
                    "rightValue": "true",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "IA NÃO PODE RESPONDER"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1380,
        -1900
      ],
      "id": "a3438b04-143c-4a77-a4e6-f57a2ff6b1c3",
      "name": "Switch6"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "aac5f81f-f8b0-49d8-b37a-e960e1162b0f",
      "name": "listar mensagens6",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -920,
        -2320
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs/{{ $json.first_id }}/cancel",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "id": "d58d3ef5-ef88-4edd-a698-2beb63a66593",
      "name": "cancel run2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        -2320
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6786c76e-8be4-4e4a-8dcd-28465a22641b",
              "name": "response",
              "value": "=# informação do dia atual e os dias da semana.\n\nhoje: {{ $now.setZone('America/Sao_Paulo').toISO() }}: {{ $now.setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(1, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(1, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(2, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(2, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(3, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(3, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(4, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(4, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n\n------------\n#dados do usuário\nNome do usuário: {{ $('Switch1').item.json.user_name }}\nTelefone: {{ $('Switch1').item.json.user_id }}\nMensagem do usuário: {{ $('Switch5').item.json.mensagem }}{{ $('Merge5').item.json['FinalTranscripition'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1160,
        -2000
      ],
      "id": "b8724176-6b8d-4a18-95cf-de46c2411da6",
      "name": "Edit Fields22"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12f46d5b-38b7-49b3-bd49-be15b616706f",
              "name": "response",
              "value": "=# informação do dia atual e os dias da semana.\n\nhoje: {{ $now.setZone('America/Sao_Paulo').toISO() }}: {{ $now.setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(1, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(1, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(2, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(2, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(3, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(3, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n- {{ $now.plus(4, 'days').setZone('America/Sao_Paulo').toISODate() }}: {{ $now.plus(4, 'days').setZone('America/Sao_Paulo').weekdayLong }}\n\n------------\n#dados do usuário\nNome do usuário: {{ $('Switch1').item.json.user_name }}\nTelefone: {{ $('Switch1').item.json.user_id }}\nMensagem do usuário: {{ $('Merge5').item.json['FinalTranscripition'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1120,
        -1600
      ],
      "id": "0a60bc04-67f8-47bf-b0ca-731ca33a9eda",
      "name": "Edit Fields23"
    },
    {
      "parameters": {
        "amount": 25,
        "path": "cc232b78-95d1-4e5f-8201-53656ff58f87"
      },
      "id": "fc0a98cc-2d1c-480f-b1cb-29190018bf5b",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -400,
        -2160
      ],
      "webhookId": "cc232b78-95d1-4e5f-8201-53656ff58f87"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "5aa7e097-878c-43d0-8093-dac1ced274a5",
              "leftValue": "={{ $json.data[0].id }}",
              "rightValue": "={{ $('Cria a mensagem3').item.json.id }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d43613a3-ac62-481b-b53c-69a356dd79d4",
      "name": "Verifica se o usuário mandou mais mensagens",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        20,
        -2160
      ]
    },
    {
      "parameters": {},
      "id": "9263a8b6-dcde-46af-ab00-290436d92a6e",
      "name": "Se for mandado o fluxo  é encerrado",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        220,
        -1800
      ]
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "b8abc42d-b087-4389-b2cd-21764647050c",
      "name": "listar mensagens",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -180,
        -2160
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Switch1').item.json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "role",
              "value": "user"
            },
            {
              "name": "content",
              "value": "={{ $json.response }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e7d181ba-743a-44ca-8ca0-4522b4e5f4cb",
      "name": "Cria a mensagem3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -620,
        -2000
      ],
      "alwaysOutputData": false,
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "90fbfd58-fd2c-4e1d-9fbd-4fd4773d5fbf",
      "name": "listar mensagens7",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -400,
        -1900
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs/{{ $json.first_id }}/cancel",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "id": "2632df04-3948-420f-a1e8-dd7e504dd09f",
      "name": "cancel run",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -180,
        -1900
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "amount": 25,
        "path": "05137592-990a-4457-a8e1-b25e8bd92002"
      },
      "id": "2fd11aa1-47ee-4ecf-956a-960f85eb63c5",
      "name": "Wait5",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -640,
        -1480
      ],
      "webhookId": "05137592-990a-4457-a8e1-b25e8bd92002"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "5aa7e097-878c-43d0-8093-dac1ced274a5",
              "leftValue": "={{ $json.data[0].id }}",
              "rightValue": "={{ $('Cria a mensagem4').item.json.id }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8f8f0af9-d493-4105-a1d6-37ee7e3f5c1f",
      "name": "Verifica se o usuário mandou mais mensagens3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -200,
        -1480
      ]
    },
    {
      "parameters": {},
      "id": "7fb8ce12-bc6a-43b7-8e0b-055887ccb0e9",
      "name": "Se for mandado o fluxo  é encerrado3",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        20,
        -1400
      ]
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "d8608232-111c-4e92-b712-7ac9eeacd471",
      "name": "listar mensagens8",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -420,
        -1480
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Switch1').item.json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "role",
              "value": "user"
            },
            {
              "name": "content",
              "value": "={{ $json.response }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ae180778-45a7-475d-82ab-04a9482e0ea4",
      "name": "Cria a mensagem4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -860,
        -1320
      ],
      "alwaysOutputData": false,
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "0af33749-18ed-4537-898a-fdd21946aaba",
      "name": "listar mensagens9",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -640,
        -1220
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Possui Thread?').first().json.thread_id }}/runs/{{ $json.first_id }}/cancel",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "id": "3328a152-12ef-4de6-aa73-6a90f7c3688a",
      "name": "cancel run3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -420,
        -1220
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a032f7f0-f4db-447a-b634-80088cdb7282",
              "name": "response",
              "value": "=# informação do dia atual e os dias da semana.\nhoje: {{ $now.setZone('America/Sao_Paulo').toISO() }}\n---\n\n# Dados Mensagem\n\n{{ $('Switch5').item.json.senderName }}\nMensagem: {{ $('Normalização1').item.json.mensagem }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1320,
        -2720
      ],
      "id": "2564c8c6-a834-46ab-8f06-d4ebd60b2079",
      "name": "Edit Fields24"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Switch1').item.json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "role",
              "value": "user"
            },
            {
              "name": "content",
              "value": "={{ $json.response }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1ae7f19b-efb4-4df3-9b24-099b5b1660ba",
      "name": "Cria a mensagem2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1100,
        -2720
      ],
      "alwaysOutputData": false,
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $json.thread_id }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "821da14f-662e-42b9-9004-e0865dfdd886",
      "name": "listar mensagens5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -660,
        -2880
      ],
      "credentials": {
        "openAiApi": {
          "id": "HqyrCnwePmXKkfxw",
          "name": "[main] - openia.com - tools@aimaze.com.br"
        }
      }
    },
    {
      "parameters": {},
      "id": "b5a8bec5-c28a-4479-80bc-387969c808f6",
      "name": "Se for mandado o fluxo  é encerrado2",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -220,
        -2800
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "5aa7e097-878c-43d0-8093-dac1ced274a5",
              "leftValue": "={{ $json.data[0].id }}",
              "rightValue": "={{ $('Cria a mensagem2').item.json.id }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ab60081b-3eb6-41f7-9933-3f4ce6349cb0",
      "name": "Verifica se o usuário mandou mais mensagens2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -440,
        -2880
      ]
    },
    {
      "parameters": {
        "amount": 25,
        "path": "1d6d2820-934a-4aa2-b9ab-b941451436f2"
      },
      "id": "a3b21124-e1af-414a-88bb-e4e6724d37e7",
      "name": "Wait4",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -880,
        -2880
      ],
      "webhookId": "1d6d2820-934a-4aa2-b9ab-b941451436f2"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Normalização1').item.json.user }}_block",
        "value": "true",
        "expire": true,
        "ttl": 900
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1540,
        -2720
      ],
      "id": "1424ece6-bd21-4800-9166-429ef2715490",
      "name": "block IA5",
      "credentials": {
        "redis": {
          "id": "d4AxnEWEdF6ojBXg",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=553899225622@s.whatsapp.net_block"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2620,
        -2620
      ],
      "id": "9852356b-5201-4ea1-9720-690225fc64ec",
      "name": "block IA7",
      "credentials": {
        "redis": {
          "id": "d4AxnEWEdF6ojBXg",
          "name": "Redis account"
        }
      }
    }
  ],
  "connections": {
    "Usuário Existe?": {
      "main": [
        [
          {
            "node": "Merge - user",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Cria o usuário que nao foi encontrado no grupo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca participantes do grupo de teste": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cria o usuário que nao foi encontrado no grupo": {
      "main": [
        [
          {
            "node": "Merge - user",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Cria a thread": {
      "main": [
        [
          {
            "node": "Adiciona Thread ao usuário",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adiciona Thread ao usuário": {
      "main": [
        [
          {
            "node": "Merge - user",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Audio Base": {
      "main": [
        [
          {
            "node": "Convert to File6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File6": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Message from Audio3": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Base": {
      "main": [
        [
          {
            "node": "Convert to File7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File7": {
      "main": [
        [
          {
            "node": "OpenAI8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set Message from image": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Set Message from image4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Message from image4": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Info Base1": {
      "main": [
        [
          {
            "node": "Pega Base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pega Base": {
      "main": [
        [
          {
            "node": "Convert to File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GroqTranscreve1": {
      "main": [
        [
          {
            "node": "Set Message from Audio1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File2": {
      "main": [
        [
          {
            "node": "GroqTranscreve1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "listar mensagens2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verifica se o usuário mandou mais mensagens1": {
      "main": [
        [],
        [
          {
            "node": "Se for mandado o fluxo  é encerrado1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Set Message from Audio3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI8": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens2": {
      "main": [
        [
          {
            "node": "Verifica se o usuário mandou mais mensagens1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Possui Thread?": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Cria a thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cria a mensagem": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "listar mensagens3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens3": {
      "main": [
        [
          {
            "node": "cancel run1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Convert to File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File3": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cancel run1": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge - user": {
      "main": [
        [
          {
            "node": "Possui Thread?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Normalização1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Set Message from image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Audio Base",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Image Base",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pega a ultima mensagem": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File3": {
      "main": [
        []
      ]
    },
    "Envia resposta em Audio1": {
      "main": [
        [
          {
            "node": "Extract from File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Completion - Formatter": {
      "main": [
        [
          {
            "node": "Separa Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa Chunks": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buffer": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        []
      ]
    },
    "Loop Over Items5": {
      "main": [
        [
          {
            "node": "Fim",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Evolution API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "separa argumentos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "separa argumentos1": {
      "main": [
        [
          {
            "node": "Escolhe Função1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [],
        [],
        [
          {
            "node": "Pega a ultima mensagem",
            "type": "main",
            "index": 0
          }
        ],
        [],
        []
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Get Run Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Run Status": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Executa uma Run - Aqui está o assistant": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escolhe Função1": {
      "main": [
        [
          {
            "node": "Google Calendar4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Calendar3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "verifica_evento_individual",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Calendar5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "calendar ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Calendar2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow1": {
      "main": [
        [
          {
            "node": "Prepara outpoot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepara outpoot": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Set tool call id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set tool call id": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow3": {
      "main": [
        [
          {
            "node": "Prepara outpoot1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepara outpoot1": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow4": {
      "main": [
        [
          {
            "node": "Prepara outpoot2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepara outpoot2": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Envia resposta em Audio1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Buffer1": {
      "main": [
        [
          {
            "node": "Loop Over Items6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items6": {
      "main": [
        [
          {
            "node": "Fim1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Evolution API1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out3": {
      "main": [
        [
          {
            "node": "Loop Over Items6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Out3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow - Get User": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evolution API1": {
      "main": [
        [
          {
            "node": "Buffer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evolution API": {
      "main": [
        [
          {
            "node": "Buffer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar3": {
      "main": [
        [
          {
            "node": "Separa dados calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar4": {
      "main": [
        [
          {
            "node": "É feriado?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize1": {
      "main": [
        [
          {
            "node": "Edit Fields12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar5": {
      "main": [
        [
          {
            "node": "output2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output1": {
      "main": [
        []
      ]
    },
    "output": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output2": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar2": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Summarize1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar4": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "output4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output4": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Google Calendar10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "output5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output5": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar10": {
      "main": [
        [
          {
            "node": "Separa dados calendar4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "verifica_evento_individual": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Split Out4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out4": {
      "main": [
        [
          {
            "node": "Edit Fields13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields13": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RabbitMQ Trigger": {
      "main": [
        [
          {
            "node": "Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Baserow - Get User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Usuário Existe?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Baserow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Baserow2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow2": {
      "main": [
        []
      ]
    },
    "Summarize2": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "output3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Summarize2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "main": [
        [
          {
            "node": "Separa dados calendar5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "output9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Separa dados calendar6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar6": {
      "main": [
        [
          {
            "node": "Edit Fields10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields10": {
      "main": [
        [
          {
            "node": "output8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calendar ": {
      "main": [
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar6": {
      "main": [
        [
          {
            "node": "Separa dados calendar1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar1": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "output6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "Google Calendar6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Separa dados calendar7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar7": {
      "main": [
        [
          {
            "node": "Edit Fields11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields11": {
      "main": [
        [
          {
            "node": "output10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calendar 10": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output8": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output9": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar5": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar7": {
      "main": [
        [
          {
            "node": "Separa dados calendar3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize3": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "output7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar3": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        [
          {
            "node": "Summarize3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields12": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output11": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow5": {
      "main": [
        [
          {
            "node": "Baserow6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow6": {
      "main": [
        [
          {
            "node": "Evolution API3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evolution API3": {
      "main": [
        [
          {
            "node": "output11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow7": {
      "main": [
        [
          {
            "node": "Baserow8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow8": {
      "main": [
        [
          {
            "node": "output12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output12": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output7": {
      "main": [
        []
      ]
    },
    "Edit Fields14": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pega a ultima mensagem1": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow9": {
      "main": [
        [
          {
            "node": "Edit Fields15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow10": {
      "main": [
        []
      ]
    },
    "Edit Fields15": {
      "main": [
        [
          {
            "node": "Edit Fields16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Baserow10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields16": {
      "main": [
        [
          {
            "node": "Summarize4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize4": {
      "main": [
        [
          {
            "node": "Prepara outpoot4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepara outpoot4": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "É feriado?": {
      "main": [
        [
          {
            "node": "output14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Calendar4sdasd",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar4sdasd": {
      "main": [
        [
          {
            "node": "Separa dados calendar8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize5": {
      "main": [
        [
          {
            "node": "Edit Fields18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "output13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa dados calendar8": {
      "main": [
        [
          {
            "node": "Edit Fields17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields17": {
      "main": [
        [
          {
            "node": "Summarize5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields18": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output13": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output14": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "block IA": {
      "main": [
        [
          {
            "node": "Não está em atendimento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Está livre o horario?": {
      "main": [
        [
          {
            "node": "block IA",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "block IA1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "block IA1": {
      "main": [
        [
          {
            "node": "Esta está em atendimento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar2": {
      "main": [
        [
          {
            "node": "Está livre o horario?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Não está em atendimento": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Esta está em atendimento": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalização1": {
      "main": [
        [
          {
            "node": "Switch5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch5": {
      "main": [
        [
          {
            "node": "block IA5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "block IA6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "block IA6": {
      "main": [
        [
          {
            "node": "Switch6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch6": {
      "main": [
        [
          {
            "node": "Edit Fields22",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens6": {
      "main": [
        [
          {
            "node": "cancel run2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields22": {
      "main": [
        [
          {
            "node": "Cria a mensagem3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "listar mensagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verifica se o usuário mandou mais mensagens": {
      "main": [
        [
          {
            "node": "Executa uma Run - Aqui está o assistant",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Se for mandado o fluxo  é encerrado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens": {
      "main": [
        [
          {
            "node": "Verifica se o usuário mandou mais mensagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cria a mensagem3": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "listar mensagens7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens7": {
      "main": [
        [
          {
            "node": "cancel run",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait5": {
      "main": [
        [
          {
            "node": "listar mensagens8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verifica se o usuário mandou mais mensagens3": {
      "main": [
        [],
        [
          {
            "node": "Se for mandado o fluxo  é encerrado3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens8": {
      "main": [
        [
          {
            "node": "Verifica se o usuário mandou mais mensagens3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cria a mensagem4": {
      "main": [
        [
          {
            "node": "Wait5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "listar mensagens9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens9": {
      "main": [
        [
          {
            "node": "cancel run3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields23": {
      "main": [
        [
          {
            "node": "Cria a mensagem4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields24": {
      "main": [
        [
          {
            "node": "Cria a mensagem2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cria a mensagem2": {
      "main": [
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "listar mensagens6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "listar mensagens5": {
      "main": [
        [
          {
            "node": "Verifica se o usuário mandou mais mensagens2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verifica se o usuário mandou mais mensagens2": {
      "main": [
        [],
        [
          {
            "node": "Se for mandado o fluxo  é encerrado2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait4": {
      "main": [
        [
          {
            "node": "listar mensagens5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "block IA5": {
      "main": [
        [
          {
            "node": "Edit Fields24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cancel run2": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cancel run": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cancel run3": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "calendar 10": [
      {
        "json": {
          "id": "etliuv8dlbj4eg53gb68ve81a4",
          "summary": "Limpeza de pele <> João Reis",
          "start": {
            "dateTime": "2025-04-17T09:00:00-03:00",
            "timeZone": "America/Sao_Paulo"
          },
          "end": {
            "dateTime": "2025-04-17T10:00:00-03:00",
            "timeZone": "America/Sao_Paulo"
          },
          "creator": {
            "email": "aimazemachine@gmail.com",
            "self": true
          },
          "organizer": {
            "email": "aimazemachine@gmail.com",
            "self": true
          },
          "description": "553899225622",
          "created": "2025-04-16T23:17:17.000Z",
          "updated": "2025-04-16T23:17:17.097Z",
          "etag": "\"3489690874194878\"",
          "eventType": "default",
          "htmlLink": "https://www.google.com/calendar/event?eid=ZXRsaXV2OGRsYmo0ZWc1M2diNjh2ZTgxYTQgYWltYXplbWFjaGluZUBt",
          "iCalUID": "etliuv8dlbj4eg53gb68ve81a4@google.com",
          "kind": "calendar#event",
          "reminders": {
            "useDefault": true
          },
          "sequence": 0,
          "status": "confirmed"
        }
      }
    ],
    "Pega a ultima mensagem1": [
      {
        "json": {
          "object": "list",
          "data": [
            {
              "id": "msg_YR0V1vt78nH9fmEjQefDn87C",
              "object": "thread.message",
              "created_at": 1745009679,
              "assistant_id": "asst_DSNuWrewEP9RPrXcAWQCvnBR",
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": "run_dFqEiSPXq1JC9zGLYAwbSplg",
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "Agatha, na segunda-feira de manhã temos esses horários disponíveis:\n\n⏰ 10:00\n⏰ 10:30\n⏰ 11:00\n\nQual horário fica melhor pra você?",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_8KPjwAJAy5iSBQxJaGQuWvtl",
              "object": "thread.message",
              "created_at": 1745009671,
              "assistant_id": null,
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": null,
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "# informação do dia atual e os dias da semana.\n\nData e hora atual: 18-04-2025 17:54:31: Friday\n- 19-04-2025: Saturday\n- 20-04-2025: Sunday\n- 21-04-2025: Monday\n- 22-04-2025: Tuesday\n------------\n#dados do usuário\nNome do usuário: Agatha Oliveira\nTelefone: 553899191590\nMensagem do usuário: Testa  e pálpebras",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_TyJoMLQUgfHHGMky9gwZ8DYM",
              "object": "thread.message",
              "created_at": 1745009624,
              "assistant_id": "asst_DSNuWrewEP9RPrXcAWQCvnBR",
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": "run_1laiISP6INvz4JkE4TeEMQ2O",
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "Agatha, que bom que quer cuidar do Botox! Posso saber se é para alguma região específica do rosto? Isso ajuda a gente a personalizar certinho o procedimento pra você. 😊",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_gcFrDBjX3hRJN3IuEWRT6I9s",
              "object": "thread.message",
              "created_at": 1745009621,
              "assistant_id": null,
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": null,
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "# informação do dia atual e os dias da semana.\n\nData e hora atual: 18-04-2025 17:53:41: Friday\n- 19-04-2025: Saturday\n- 20-04-2025: Sunday\n- 21-04-2025: Monday\n- 22-04-2025: Tuesday\n------------\n#dados do usuário\nNome do usuário: Agatha Oliveira\nTelefone: 553899191590\nMensagem do usuário: Gostaria de marcar uma cessão de Botox",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_OWpJ3Ewf9cIid8oWwocUkOtl",
              "object": "thread.message",
              "created_at": 1745009568,
              "assistant_id": "asst_DSNuWrewEP9RPrXcAWQCvnBR",
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": "run_a5se9EAksBcRga5Y6h9soaMN",
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "Boa noite, Agatha! Eu sou Camila, a nova atendente da Clin Dermy. Como posso ajudar você hoje? 😊",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            },
            {
              "id": "msg_wj8BRq7AHsrij2GHjq4xs0Rr",
              "object": "thread.message",
              "created_at": 1745009564,
              "assistant_id": null,
              "thread_id": "thread_PSeUQrVGQeSphvF2pQLdBAql",
              "run_id": null,
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": {
                    "value": "# informação do dia atual e os dias da semana.\n\nData e hora atual: 18-04-2025 17:52:44: Friday\n- 19-04-2025: Saturday\n- 20-04-2025: Sunday\n- 21-04-2025: Monday\n- 22-04-2025: Tuesday\n------------\n#dados do usuário\nNome do usuário: Agatha Oliveira\nTelefone: 553899191590\nMensagem do usuário: Boa Noite!",
                    "annotations": []
                  }
                }
              ],
              "attachments": [],
              "metadata": {}
            }
          ],
          "first_id": "msg_YR0V1vt78nH9fmEjQefDn87C",
          "last_id": "msg_wj8BRq7AHsrij2GHjq4xs0Rr",
          "has_more": false
        }
      }
    ],
    "Baserow10": [
      {
        "json": {
          "id": 24,
          "order": "24.00000000000000000000",
          "uuid": "c1b0dc63-b516-4b9c-aa91-d080a18984b0",
          "Procedimento": "Limpeza de Pele",
          "Description": "Nossa limpeza consiste em devolver o brilho da sua pele de forma natural a extraçãe usamos o endermo, para propocionar melhor conforto para o cliente e não deixando nenhuma marca. Finalizamos com a mascara de  LED  de acordo com a necessidade de cada pele",
          "Time_procedimento": "60",
          "Cobra avaliação?": "Não",
          "Motivo da cobranca": "",
          "Preco Avaliacao": "",
          "Cuidados Pre-avaliacao": "Evitar ácidos 7 d; não bronzear; não espremer espinhas.",
          "Cuidados pos-avaliacao": "FPS 72 h, sem maquiagem 24 h, hidratação intensiva.",
          "Up-sell": "Revitalização facial, clareamento facial",
          "Reclamacoes que motivam o procedimento": "Pele oleosa, muitos cravos, acne"
        }
      }
    ],
    "RabbitMQ Trigger": [
      {
        "json": {
          "fields": {
            "consumerTag": "amq.ctag-k6QX7fcloA6mXMkR16Yf_Q",
            "deliveryTag": 1,
            "redelivered": false,
            "exchange": "",
            "routingKey": "messages_clindermy"
          },
          "properties": {
            "headers": {}
          },
          "content": {
            "headers": {
              "host": "webhooks.aimaze.com.br",
              "user-agent": "axios/1.7.9",
              "content-length": "880",
              "accept-encoding": "gzip, compress, deflate, br",
              "content-type": "application/json",
              "x-forwarded-for": "178.156.151.68",
              "x-forwarded-host": "webhooks.aimaze.com.br",
              "x-forwarded-port": "443",
              "x-forwarded-proto": "https",
              "x-forwarded-server": "traefik_traefik.1",
              "x-real-ip": "178.156.151.68"
            },
            "params": {},
            "query": {},
            "body": {
              "event": "messages.upsert",
              "instance": "aimaze",
              "data": {
                "key": {
                  "remoteJid": "553899225622@s.whatsapp.net",
                  "fromMe": false,
                  "id": "3A620CF71BF2D8587022"
                },
                "pushName": "João Reis",
                "status": "DELIVERY_ACK",
                "message": {
                  "conversation": "Olá",
                  "messageContextInfo": {
                    "deviceListMetadata": {
                      "senderKeyHash": "jb0MD/Ii+xeV5Q==",
                      "senderTimestamp": "1745629647",
                      "recipientKeyHash": "5aKSqcqaQPmxig==",
                      "recipientTimestamp": "1744650225"
                    },
                    "deviceListMetadataVersion": 2,
                    "messageSecret": "JdP4mMWJAQ4J0foX0n44eTxyUKVBy+U0tLQUA1iAIdo="
                  }
                },
                "messageType": "conversation",
                "messageTimestamp": 1746473663,
                "instanceId": "0d2743da-178c-41ea-a451-387c6dcd81b1",
                "source": "ios"
              },
              "destination": "https://webhooks.aimaze.com.br/webhook/pixeomachine",
              "date_time": "2025-05-05T16:34:23.711Z",
              "sender": "553187712022@s.whatsapp.net",
              "server_url": "https://wsapi.clindermy.aimaze.com.br",
              "apikey": "C20C6E36A318-4F67-9204-89A641D4A789"
            },
            "webhookUrl": "https://webhooks.aimaze.com.br/webhook/pixeomachine",
            "executionMode": "production"
          }
        }
      }
    ]
  },
  "versionId": "e3780bcb-c517-4380-8e2a-c3b8d2208f3c",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-01-03T00:21:36.014Z",
      "updatedAt": "2025-01-03T00:21:36.014Z",
      "id": "hi69d8K45xRFQtMr",
      "name": "Book Keeper"
    }
  ]
}